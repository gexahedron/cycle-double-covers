#!/usr/bin/env python
# -*- coding: utf-8 -*-

import copy
import numpy as np
from math import sqrt, sin, cos
import common

def cyclic_permutations(points):
    new_points = []
    for p in points:
        new_points.append(p)
        new_points.append([p[1], p[2], p[0]])
        new_points.append([p[2], p[0], p[1]])
    return new_points


def all_permutations(points):
    new_points = []
    for p in points:
        new_points.extend(cyclic_permutations([p]))
        new_points.extend(cyclic_permutations([[p[1], p[0], p[2]]]))
    return new_points


def plus_minus(points):
    new_points = []
    for p in points:
        mults = []
        for i in range(len(p)):
            if common.same(p[i], 0):
                mults.append([1])
            else:
                mults.append([1, -1])
        for i in mults[0]:
            for j in mults[1]:
                for k in mults[2]:
                    new_points.append([p[0] * i, p[1] * j, p[2] * k])
    return new_points


def conf1(points):
    return plus_minus(cyclic_permutations(points))


def conf2(points):
    return plus_minus(all_permutations(points))


def rotation_matrix(axis, theta):
    """
    Return the rotation matrix associated with counterclockwise rotation about
    the given axis by theta radians.
    """
    axis = np.asarray(axis)
    theta = np.asarray(theta)
    axis = axis / sqrt(np.dot(axis, axis))
    a = cos(theta / 2.0)
    b, c, d = -axis * sin(theta / 2.0)
    aa, bb, cc, dd = a * a, b * b, c * c, d * d
    bc, ad, ac, ab, bd, cd = b * c, a * d, a * c, a * b, b * d, c * d
    return np.array([ \
            [aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)], \
            [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)], \
            [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]])


def simple_rotate(points, axis, angle):
    rm = rotation_matrix(axis, angle)
    new_points = []
    for p in points:
        new_points.append(np.dot(rm, p))
    return new_points


def rotate1(points):
    new_points = copy.deepcopy(points)
    for i in range(5):
        for k in range(1, 29, 8):
            rotated1 = simple_rotate(points[:i], points[i], np.pi * k / 15.0)
            rotated2 = simple_rotate(points[i+1:], points[i], np.pi * k / 15.0)
            new_points.extend(rotated1)
            new_points.extend(rotated2)
    return new_points


########## spherical dodecahedron/icosahedron ##########
# no triangles
def gen_points1():
    phi = (1.0 + sqrt(5)) / 2
    return conf1([[0.0, phi, 1.0]])


########## spherical tetrahedron ##########
# boring, has nz4flow
def gen_points2():
    c0 = sqrt(2)
    return conf2([[c0, 0.0, 1.0]])


########### some random points ##############
# no (interesting) triangles
def gen_points3():
    c0 = sqrt(3)
    points = [[0.0, 0.0, 2.0]]
    points.extend(conf2([[c0, 0.0, 1.0]]))
    return points


######### cuboctahedron #########
# boring, has nz4flow
def gen_points4():
    return conf1([[1.0, 1.0, 0.0]])


######### rhombicuboctahedron #########
# no triangles
def gen_points5():
    c0 = 1.0 + sqrt(2)
    return conf1([[1.0, 1.0, c0]])


######### truncated cuboctahedron #########
# no triangles, also slow
def gen_points6():
    c0 = sqrt(2)
    a = 1.0
    b = 1.0 + c0
    c = 1.0 + 2.0 * c0
    return conf2([[a, b, c]])


######### icosidodecahedron #########
# great! no nz4flow; has nz5flow
def gen_points7():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.5, phi / 2, (1.0 + phi) / 2
    points = conf1([[a, b, c]])
    points.extend(conf1([[0.0, 0.0, phi]]))
    return points


######### smaller part of icosidodecahedron #########
# also works! no nz4flow; has nz5flow
def gen_points8():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.5, phi / 2, (1.0 + phi) / 2
    return [\
            [0.0, 0.0, phi], [0.0, phi, 0.0], [phi, 0.0, 0.0], \
            [a, b, c], [a, b, -c], \
            [b, c, a], [b, c, -a], \
            [c, a, b], [c, -a, -b], [c, -a, b]]


#### trying to extend example 8 ####
# nz5flowable; has most interesting bulk of 54 points
def gen_points9():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.5, phi / 2, (1.0 + phi) / 2
    points = conf1(([[0.0, 0.0, phi]]))
    points.extend(conf2([[a, b, c]])) # it's not what is in comments further, it's more points
    return points


###### truncated icosahedron ######
# probably no triangles (2/3)
def gen_points10():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.0, 1.0, 3.0 * phi
    points = conf1([[a, b, c]])
    a, b, c = 2.0, 1.0 + 2.0 * phi, phi
    points.extend(conf1([[a, b, c]]))
    a, b, c = 1.0, 2.0 + phi, 2.0 * phi
    points.extend(conf1([[a, b, c]]))
    return points


###### pentakis dodecahedron ######
# no triangles
def gen_points11():
    c0 = 3.0 * (sqrt(5) - 1.0) / 4
    c1 = 9.0 * (9.0 + sqrt(5)) / 76
    c2 = 9.0 * (7.0 + 5 * sqrt(5)) / 76
    c3 = 3.0 * (1.0 + sqrt(5)) / 4
    points = conf1([[0.0, c0, c3]])
    points.extend(conf1([[c1, 0.0, c2]]))
    points.extend(plus_minus([[1.5, 1.5, 1.5]]))
    return points


###### rhombicosidodecahedron ######
# haven't found anything
def gen_points12():
    c0 = (1.0 + sqrt(5)) / 4
    c1 = (3.0 + sqrt(5)) / 4
    c2 = (1.0 + sqrt(5)) / 2
    c3 = (5.0 + sqrt(5)) / 4
    c4 = (2.0 + sqrt(5)) / 2
    points = conf1([[0.5, 0.5, c4]])
    points.extend(conf1([[0.0, c1, c3]]))
    points.extend(conf1([[c1, c0, c2]]))
    return points


###### tetrakis cube ######
# no triangles
def gen_points13():
    c0 = (3.0 + sqrt(2)) / 4
    c1 = (9.0 + sqrt(2)) / 8
    points = conf1([[0, 0, c1]])
    points.extend(plus_minus([[c0, c0, c0]]))
    return points


###### pentakis icosidodecahedron ######
# no nz4flow! has nz5flow
def gen_points14():
    c0 = sqrt(5 * (5 - 2 * sqrt(5))) / 5
    c1 = sqrt(10 * (5 - sqrt(5))) / 10
    c2 = (6 * sqrt(5) + sqrt(2 * (85 - sqrt(5))) - 16) / 19
    c3 = sqrt(10 * (5 + sqrt(5))) / 10
    c4 = (7 - 5 * sqrt(5) + sqrt(2 * (125 + 41 * sqrt(5)))) / 19
    c5 = sqrt(10 * (5 - sqrt(5))) / 5

    points = conf1([[0.0, 0.0, c5]])
    points.extend(conf1([[c2, 0.0, c4]]))
    points.extend(conf1([[c0, c1, c3]]))
    return points


###### tetrakis cuboctahedron ######
# has nz4flow
def gen_points15():
    c0 = sqrt(6) / 3
    c1 = sqrt(6) - sqrt(2)
    points = conf1([[0.0, 0.0, c1]])
    points.extend(conf1([[c0, 0.0, c0]]))
    return points


###### Geodesic Icosahedron Pattern 14 [6, 0] ######
# probably no triangles? (at least with approach 2)
def gen_points16():
    c0  = 0.0909559939462343389847801364994
    c1  = 0.105092395327782055492104752016
    c2  = 0.147169889685536836363696394237
    c3  = 0.170785292063931857260866639641
    c4  = 0.180817893354399205833943539451
    c5  = 0.200982795505730775757657363193
    c6  = 0.206080042477829123503454872524
    c7  = 0.210184790655564110984209504031
    c8  = 0.276336407338019424631905013916
    c9  = 0.305838917948831476550342030089
    c10 = 0.310722295892874653632807639432
    c11 = 0.3251969942822420068809995620148
    c12 = 0.3508609609538912181184546490251
    c13 = 0.358831512545503044771934201090
    c14 = 0.389962309302013003311080884206
    c15 = 0.397661892549353706541303645909
    c16 = 0.407062837983559899261112235717
    c17 = 0.462612564821063663333710003467
    c18 = 0.4809183032482473422958610207054
    c19 = 0.502754287877135762033408397924
    c20 = 0.502759235817073045513978386020
    c21 = 0.520904028553383230402965758599
    c22 = 0.526810245041234649133122457362
    c23 = 0.580601583533158225629807547928
    c24 = 0.5821753252868509011822470440051
    c25 = 0.628088192933784178659557414942
    c26 = 0.632655632420555675618221113041
    c27 = 0.658641507414391627337745658639
    c28 = 0.665643056387631460153839105283
    c29 = 0.672797355476627774317919507498
    c30 = 0.732259832265801906142111797732
    c31 = 0.737748027748337731110325865057
    c32 = 0.752960617350782758443113683646
    c33 = 0.771194171661719027524877479559
    c34 = 0.778142160467593159278524983493
    c35 = 0.813481531709947699146786025452
    c36 = 0.852396882098378412518464723866
    c37 = 0.85361524883102698015186304694952
    c38 = 0.859624302920122403095403021832
    c39 = 0.869098154413827498263305119993
    c40 = 0.918565921102736936944269404508
    c41 = 0.925312050153129995642221377730
    c42 = 0.939433096078661270401741749018
    c43 = 0.941979463725650884785744119200
    c44 = 0.983516593374446893736675762066
    c45 = 0.983838501696633634218745220654
    c46 = 1.00551847163414609102795677204


    points = []
    points = conf1([[0.0, 0.0, c46]])
    points = conf1([[c6, 0.0, c45]])
    points = conf1([[c1, c4, c44]])
    points = conf1([[c9, c3, c43]])
    points = conf1([[0.0, c13, c42]])
    points = conf1([[0.0, c41, c14]])
    points = conf1([[c7, c12, c40]])
    points = conf1([[c18, c2, c39]])
    points = conf1([[c16, c11, c38]])
    points = conf1([[c1, c21, c37]])
    points = conf1([[0.0, c36, c22]])
    points = conf1([[c10, c20, c35]])
    points = conf1([[c25, c0, c34]])
    points = conf1([[c24, c8, c33]])
    points = conf1([[0.0, c28, c32]])
    points = conf1([[c19, c17, c31]])
    points = conf1([[c5, c27, c30]])
    points = conf1([[c15, c26, c29]])
    points = plus_minus([[c23, c23, c23]])

    return points


###### Geodesic Icosahedron Pattern 15 [4, 3] ######
# probably no triangles? (at least with approach 2)
def gen_points17():
    c0  = 0.0150124452580527908978445408401
    c1  = 0.0281991797825302780244189642284
    c2  = 0.0332027765194070511303595165176
    c3  = 0.0515387823817814074231838892257
    c4  = 0.0589933731016308516944966816290
    c5  = 0.0685875359894132927988608240304
    c6  = 0.0769068044612881303250393417126
    c7  = 0.0848760774350141640286094273454
    c8  = 0.101197451143064732053976011790
    c9  = 0.102082095789502183482232575336
    c10 = 0.120126318371194700222044713256
    c11 = 0.135850307191429061995459326559
    c12 = 0.139450268842559032482129187208
    c13 = 0.144460730295782666095031000354
    c14 = 0.146869511123424781553629898922
    c15 = 0.148728470266282843313221316446
    c16 = 0.170093505585318257608833797424
    c17 = 0.19008796163878552422014477524502
    c18 = 0.218852314262719080668885180028
    c19 = 0.223816726514585799002600884407
    c20 = 0.237932402980931245477691901894
    c21 = 0.250641902739473110089272730609
    c22 = 0.261941551440738282244114061648
    c23 = 0.263586890409805198124967780032
    c24 = 0.264350508961270935694247323670
    c25 = 0.279369603001210862344808872311
    c26 = 0.283844679258880161219632247126
    c27 = 0.303728391697733244697494607374
    c28 = 0.308419849822072069289880487468
    c29 = 0.314305597052161603507092226992
    c30 = 0.328940294231932559553288057933
    c31 = 0.346978392042311774712990014796
    c32 = 0.366679925541271271643105378610
    c33 = 0.373490168100211111260490451936
    c34 = 0.399181674487175767535701654337
    c35 = 0.408811239257053601789278324024
    c36 = 0.409957707586146937800253542938
    c37 = 0.413103856095283708496130936218
    c38 = 0.424970152844199728698098083778
    c39 = 0.449563765783095379639841301553
    c40 = 0.4544384706000564599143920989153
    c41 = 0.4574502753266285393545066050648
    c42 = 0.457955356477789130530050193437
    c43 = 0.475572263889713294742723027272
    c44 = 0.478031330053739917621035562969
    c45 = 0.509884049304465086785873908508
    c46 = 0.526775398650823137653292693710
    c47 = 0.5318522261715083358440447123247
    c48 = 0.546618866043153210419896386999
    c49 = 0.549407976428705970282382730147
    c50 = 0.550436234216904620360158698447
    c51 = 0.559061752561545179379153218076
    c52 = 0.573698623110482572011319400224
    c53 = 0.586896143904716291503869063782
    c54 = 0.612784973490812720772920305059
    c55 = 0.620861013739942442602934087148
    c56 = 0.622622575956865603555445938780
    c57 = 0.629363844151998671947635881664
    c58 = 0.630010367675659787007918621764
    c59 = 0.650605427571770702336358741937
    c60 = 0.672399796121723850026117976374
    c61 = 0.6881808422582644641340871963352
    c62 = 0.68966965988340831666428614742546
    c63 = 0.695382678307559784832198506959
    c64 = 0.707097711443880896764980958088
    c65 = 0.716380022040794742158506160564
    c66 = 0.734487411869345432498323055190
    c67 = 0.753292157480828624337335908926
    c68 = 0.758472883148294665550905265339
    c69 = 0.764522955967441088277522253728
    c70 = 0.767690188388752483628682571708
    c71 = 0.782878479076130978381754102483
    c72 = 0.805748458167435372172754243811
    c73 = 0.812053975090659199536767558384
    c74 = 0.8122855305824594760318325905551
    c75 = 0.827066420348711990434612099224
    c76 = 0.842252189430984566385828405882
    c77 = 0.851558441739663562860011958442
    c78 = 0.852340499454307338508999871652
    c79 = 0.864741831269066223867250925440
    c80 = 0.879757621522193840884430922670
    c81 = 0.893597258085464985132886401796
    c82 = 0.903973224810000120759651440936
    c83 = 0.905342394271719447104535164261
    c84 = 0.913251426233723931590743570173
    c85 = 0.935986686531529048151085756406
    c86 = 0.937783693974070741237516369132
    c87 = 0.958304138383931231500923939597
    c88 = 0.9678394057822542173159241019448
    c89 = 0.969039262884619179009095019737
    c90 = 0.989302501498136875198551317389

    points = []
    points.extend(conf1([[c7, c4, 1.0]]))
    points.extend(conf1([[c9, c14, c90]]))
    points.extend(conf1([[c24, c1, c89]]))
    points.extend(conf1([[c5, c23, c88]]))
    points.extend(conf1([[c21, c16, c87]]))
    points.extend(conf1([[c26, c19, c86]]))
    points.extend(conf1([[c10, c31, c85]]))
    points.extend(conf1([[c36, c6, c84]]))
    points.extend(conf1([[c20, c32, c83]]))
    points.extend(conf1([[c38, c8, c82]]))
    points.extend(conf1([[c3, c42, c81]]))
    points.extend(conf1([[c35, c22, c80]]))
    points.extend(conf1([[c27, c37, c79]]))
    points.extend(conf1([[c46, 0.0, c78]]))
    points.extend(conf1([[c40, c25, c77]]))
    points.extend(conf1([[c11, c47, c76]]))
    points.extend(conf1([[c49, c15, c75]]))
    points.extend(conf1([[c18, c50, c74]]))
    points.extend(conf1([[c52, c12, c73]]))
    points.extend(conf1([[c34, c39, c72]]))
    points.extend(conf1([[c2, c57, c71]]))
    points.extend(conf1([[c51, c30, c70]]))
    points.extend(conf1([[c59, c0, c69]]))
    points.extend(conf1([[c43, c41, c68]]))
    points.extend(conf1([[c29, c53, c67]]))
    points.extend(conf1([[c54, c28, c66]]))
    points.extend(conf1([[c13, c62, c65]]))
    points.extend(conf1([[c61, c17, c64]]))
    points.extend(conf1([[c33, c56, c63]]))
    points.extend(conf1([[c48, c45, c60]]))
    points.extend(conf1([[c44, c55, c58]]))

    return points


###### repelling 60 points ######
# no triangles
def gen_points18():
    return [\
            [-0.294370896498, -0.812394048781, 0.503350459223], \
            [0.752216332025, -0.142498183101, -0.643323291703], \
            [0.159963915, -0.746908213504, 0.645398842963], \
            [-0.403365664917, -0.0241357415383, -0.91472050723], \
            [-0.967150743583, 0.190462462804, -0.168355247763], \
            [0.433980285359, 0.787759478703, -0.437145417033], \
            [0.783770177613, -0.0685743002843, 0.617253492518], \
            [0.623015626378, -0.623685224895, -0.472089260137], \
            [-0.968106257964, -0.229174787695, 0.101238283153], \
            [-0.397867799346, 0.912465933867, 0.0954313039639], \
            [0.347531316191, 0.776941829536, 0.524960358297], \
            [-0.000186386042119, 0.0098023955473, 0.999951937996], \
            [-0.0396951477983, 0.310035499752, -0.949895933318], \
            [-0.448686557286, -0.0673049120986, 0.891151178038], \
            [0.376246706127, -0.376442609178, 0.846598711388], \
            [0.426062593572, 0.0712966620809, -0.901879954503], \
            [-0.772941105113, 0.633425685776, 0.0365232614391], \
            [0.94077127939, 0.231181278264, 0.248001242849], \
            [0.791960600169, 0.578939932213, -0.193976706513], \
            [-0.608230660464, -0.389715892114, -0.691503425231], \
            [0.726572801773, 0.637803636953, 0.255535681293], \
            [0.736692599024, 0.333554561353, -0.588239210818], \
            [-0.149657233548, 0.774324430171, 0.614836880227], \
            [0.187784433255, 0.48061952301, 0.85658734565], \
            [-0.922865100212, 0.258150493884, 0.285794207986], \
            [-0.82790478068, -0.156947416, 0.538461867487], \
            [-0.574685650731, 0.670955084872, 0.468567686602], \
            [0.949616156599, -0.237284936548, 0.204755986512], \
            [0.382794216856, -0.421923623685, -0.821857069884], \
            [0.679561776503, -0.517092441316, 0.520395233501], \
            [0.0249486911364, 0.971473683955, 0.235831389328], \
            [-0.530062815352, -0.482826380866, 0.69707395427], \
            [0.435069328319, 0.072415766478, 0.897480159291], \
            [-0.746354958051, 0.52211577466, -0.412734048078], \
            [0.158066676116, -0.775807450011, -0.6108500032], \
            [0.0282597599075, -0.166544606267, -0.985628875436], \
            [-0.175098696966, -0.538655444039, -0.82413030458], \
            [-0.758518590299, -0.622851684125, -0.191586345424], \
            [-0.418961857044, 0.830620175109, -0.366798428356], \
            [-0.046417072752, 0.745995796243, -0.66433103747], \
            [-0.900449640634, -0.23153427988, -0.368215048474], \
            [-0.419983203032, -0.768154941622, -0.483272278154], \
            [-0.446973570689, -0.893587105709, 0.0414332187517], \
            [0.915061000538, -0.310647044831, -0.257219320489], \
            [0.649941609106, 0.40148079742, 0.645282166231], \
            [0.0176011523752, 0.969350410531, -0.245050976408], \
            [-0.275310265395, 0.402958626495, 0.872827934418], \
            [0.967911724308, 0.139264859203, -0.209170248691], \
            [-0.0800958654353, -0.961742498002, -0.261984770314], \
            [0.383963187072, -0.906014817298, -0.178071395259], \
            [0.0163241861327, -0.980327532442, 0.196701423695], \
            [-0.753514759889, 0.11315182473, -0.647620391271], \
            [-0.432601383483, 0.476331624218, -0.765483002279], \
            [-0.680732085758, 0.281672997245, 0.676213095143], \
            [0.444126939796, -0.844375968074, 0.299633919787], \
            [-0.101541199506, -0.445627513023, 0.889441119153], \
            [0.43364434114, 0.900929684861, 0.0166819762962], \
            [0.348057660084, 0.514940914248, -0.783384784184], \
            [0.759439804432, -0.650168196364, 0.0230759589635], \
            [-0.738742653333, -0.607453603438, 0.291992143416]]



# more accurate 60 repelling points
# nothing
def gen_points19():
    return [ \
            [-0.296549696061, 0.503903807606, 0.811257807633], \
            [0.533083266191, 0.302848709722, 0.790003095137], \
            [-0.9717679084, -0.212822075694, 0.101852325949], \
            [-0.0347096526369, -0.431762094038, 0.90131944069], \
            [-0.12895024941, -0.701621073586, -0.700785061397], \
            [0.231102204102, 0.932877908886, 0.276279891362], \
            [-0.354307689224, -0.767939854313, 0.533605136327], \
            [0.0710030519253, 0.495614663352, -0.865635415223], \
            [0.454352401453, -0.82645758835, 0.332463155782], \
            [-0.806339347493, 0.591444807114, 0.00314592160499], \
            [-0.736479276244, -0.592457729862, 0.326484477411], \
            [0.0846116267701, 0.264998771484, 0.960529293529], \
            [0.793821182428, -0.503447876138, 0.341157099207], \
            [0.327758702512, -0.779994242465, -0.533088374146], \
            [0.315231622365, -0.128571107632, 0.940265119285], \
            [-0.973396638661, 0.178999758055, -0.143031711376], \
            [0.852104887386, 0.320517427055, 0.413746105537], \
            [-0.505827925967, 0.796182034922, -0.332012464494], \
            [-0.774600211785, 0.410867719947, -0.480814131041], \
            [-0.458344166691, 0.879312953271, 0.129342008139], \
            [-0.0258797490922, -0.977276964012, 0.210380546151], \
            [0.867903797279, 0.0694971377595, -0.491846669718], \
            [0.346759395015, -0.932138506467, -0.104286752416], \
            [-0.265838996108, 0.161509534088, -0.950391655344], \
            [0.963950004756, 0.258289400436, -0.0639294451251], \
            [-0.817896067825, -0.180524833925, 0.546312004786], \
            [0.0921575056059, -0.771719476552, 0.629250382336], \
            [0.693468709722, -0.495071826241, -0.523454903023], \
            [-0.908960505796, 0.243771417425, 0.3381808613], \
            [0.736399818417, -0.108424302233, 0.667801975229], \
            [-0.0695402440681, 0.994142880947, -0.0827289956313], \
            [0.965211186188, -0.100639365997, 0.24132775238], \
            [-0.212091311861, -0.292479345744, -0.932455418637], \
            [-0.0871619973137, -0.956336488539, -0.278968290156], \
            [0.557586021792, 0.679120418224, 0.477381698279], \
            [0.395070680972, 0.904099376899, -0.16286028898], \
            [-0.491325196637, -0.395843974445, 0.775826719729], \
            [0.476190611344, -0.508339858053, 0.717518703855], \
            [0.595253987027, -0.144584264353, -0.79042272325], \
            [0.366547184129, 0.729100009925, -0.577976069863], \
            [-0.630069100448, 0.179231736753, 0.755571911337], \
            [0.945690682062, -0.267934408475, -0.184065984405], \
            [-0.494802897346, -0.765741645297, -0.410864728878], \
            [-0.890331375078, -0.179825091951, -0.418297715577], \
            [-0.465513321227, -0.883151042053, 0.0578064415203], \
            [-0.656799438983, 0.0537690381531, -0.752145855195], \
            [0.733892679611, 0.676826334409, 0.0575121540573], \
            [0.248364054668, -0.447862220508, -0.858914854797], \
            [-0.808889157092, -0.565789868919, -0.159937974751], \
            [-0.588202299545, -0.417547172142, -0.692583867734], \
            [0.729550939631, -0.677672552082, -0.0922785925238], \
            [-0.400506920706, 0.550564988273, -0.732442762374], \
            [0.168900595422, 0.665694801203, 0.726858322177], \
            [-0.184746885887, 0.855049469103, 0.484519342794], \
            [-0.634241481321, 0.602082907304, 0.485009191772], \
            [0.531292065049, 0.324941100731, -0.782395055373], \
            [0.187085628299, 0.0256080244569, -0.982009774273], \
            [-0.0713973516646, 0.849436455601, -0.522838527723], \
            [-0.266550195763, -0.0219925142232, 0.963570092135], \
            [0.747624112853, 0.535613620132, -0.392652818416]] 


###### Geodesic Icosahedron Pattern 3 [2, 1] (Pentakis Snub Dodecahedron) ######
# nothing
def gen_points20():
    c0  = 0.0919831947610306166536978645902
    c1  = 0.157802827551188752848878549936
    c2  = 0.1787372607291718755716205007246
    c3  = 0.2707204554902024922253183653148
    c4  = 0.306634763068337552375856521956
    c5  = 0.347313533259692355979268469051
    c6  = 0.404162274015810538852548576480
    c7  = 0.5260507939888642315508889697754
    c8  = 0.5335632139999518363605442871496
    c9  = 0.595837725984189461147451423520
    c10 = 0.6748827295060130310778669417953
    c11 = 0.693365236931662447624143478044
    c12 = 0.785348431692693064277841342634
    c13 = 0.832685557057201783926745491732
    c14 = 0.863323415398555806964420242008
    c15 = 0.943151259243881817126719892570
    points = []
    points.extend(conf1([[c2, c1, 1.0]]))
    points.extend(conf1([[c3, c4, c15]]))
    points.extend(conf1([[c14, c8, 0.0]]))
    points.extend(conf1([[c0, c9, c13]]))
    points.extend(conf1([[c7, c6, c12]]))
    points.extend(conf1([[c10, c5, c11]]))
    return points



###### Snub Dodecahedron (laevo) ######
# nothing
def gen_points21():
    c0  = 0.192893711352359022108262546061
    c1  = 0.330921024729844230963655269187
    c2  = 0.374821658114562295266609516608
    c3  = 0.567715369466921317374872062669
    c4  = 0.643029605914072573107464141441
    c5  = 0.728335176957191477360671629838
    c6  = 0.847550046789060797396217956030
    c7  = 1.103156835071753772627281146446
    c8  = 1.24950378846302719500774109632
    c9  = 1.41526541625598211477109001870
    c10 = 1.45402422933801541929649491091
    c11 = 1.64691794069037444140475745697
    c12 = 1.74618644098582634573474528789
    c13 = 1.97783896542021867236841272616
    c14 = 2.097053835252087992403959052348
    points = []
    points.extend(conf1([[c2, c1, c14]]))
    points.extend(conf1([[c3, c4, c13]]))
    points.extend(conf1([[c0, c8, c12]]))
    points.extend(conf1([[c7, c6, c11]]))
    points.extend(conf1([[c9, c5, c10]]))
    return points



###### Snub Dodecahedron (dextro) ######
# nothing
def gen_points22():
    c0  = 0.192893711352359022108262546061
    c1  = 0.330921024729844230963655269187
    c2  = 0.374821658114562295266609516608
    c3  = 0.567715369466921317374872062669
    c4  = 0.643029605914072573107464141441
    c5  = 0.728335176957191477360671629838
    c6  = 0.847550046789060797396217956030
    c7  = 1.103156835071753772627281146446
    c8  = 1.24950378846302719500774109632
    c9  = 1.41526541625598211477109001870
    c10 = 1.45402422933801541929649491091
    c11 = 1.64691794069037444140475745697
    c12 = 1.74618644098582634573474528789
    c13 = 1.97783896542021867236841272616
    c14 = 2.097053835252087992403959052348
    points = []
    points.extend(conf1([[c2, c1, c14]]))
    points.extend(conf1([[c3, c4, c13]]))
    points.extend(conf1([[c0, c8, c12]]))
    points.extend(conf1([[c7, c6, c11]]))
    points.extend(conf1([[c9, c5, c10]]))
    return points


###### truncated cube ######
# nothing
def gen_points23():
    c0 = (1.0 + sqrt(2)) / 2.0
    return conf1([[c0, c0, 0.5]])


###### random points, satisfying great circles triangles ######
# boring
def gen_points24():
    a = sqrt(2.0 / 3)
    b = -a / 2
    c = -a - b
    points = []
    points.extend(conf1([[a, b, c]]))
    points.extend(conf1([[0, 0, 1]]))
    return points
