#!/usr/bin/env python
# -*- coding: utf-8 -*-

import copy
import numpy as np
from math import sqrt, sin, cos
from common import same
# from e8_hopf600 import gen_e8_points

def cbrt(x):
    return x ** (1.0 / 3)


def cyclic_permutations(points):
    new_points = []
    for p in points:
        new_points.append(p)
        new_points.append([p[1], p[2], p[0]])
        new_points.append([p[2], p[0], p[1]])
    return new_points


def all_permutations(points):
    new_points = []
    for p in points:
        new_points.extend(cyclic_permutations([p]))
        new_points.extend(cyclic_permutations([[p[1], p[0], p[2]]]))
    return new_points


def plus_minus(points):
    new_points = []
    for p in points:
        mults = []
        for i in range(len(p)):
            if same(p[i], 0):
                mults.append([1])
            else:
                mults.append([1, -1])
        for i in mults[0]:
            for j in mults[1]:
                for k in mults[2]:
                    new_points.append([p[0] * i, p[1] * j, p[2] * k])
    return new_points


def conf0(points):
    return plus_minus(points)


def conf1(points):
    return plus_minus(cyclic_permutations(points))


def conf2(points):
    return plus_minus(all_permutations(points))


def rotation_matrix(axis, theta):
    """
    return the rotation matrix associated with counterclockwise rotation about
    the given axis by theta radians.
    """
    axis = np.asarray(axis)
    theta = np.asarray(theta)
    axis = axis / sqrt(np.dot(axis, axis))
    a = cos(theta / 2.0)
    b, c, d = -axis * sin(theta / 2.0)
    aa, bb, cc, dd = a * a, b * b, c * c, d * d
    bc, ad, ac, ab, bd, cd = b * c, a * d, a * c, a * b, b * d, c * d
    return np.array([ \
            [aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)], \
            [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)], \
            [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]])


def simple_rotate(points, axis, angle):
    rm = rotation_matrix(axis, angle)
    new_points = []
    for p in points:
        new_points.append(np.dot(rm, p))
    return new_points


def rotate1(points):
    parts = 10
    new_points = copy.deepcopy(points)
    for i in range(5):
        for k in range(1, 2 * parts):
            rotated1 = simple_rotate(points[:i], points[i], np.pi * k / parts)
            rotated2 = simple_rotate(points[i+1:], points[i], np.pi * k / parts)
            new_points.extend(rotated1)
            new_points.extend(rotated2)
    return new_points


########## spherical dodecahedron/icosahedron ##########
# no triangles
def gen_points1():
    phi = (1.0 + sqrt(5)) / 2
    return conf1([[0.0, phi, 1.0]])


########## spherical tetrahedron ##########
# no triangles
def gen_points2():
    c0 = sqrt(2)
    return conf2([[c0, 0.0, 1.0]])


########### some random points ##############
# no (interesting) triangles
def gen_points3():
    c0 = sqrt(3)
    points = [[0.0, 0.0, 2.0]]
    points.extend(conf2([[c0, 0.0, 1.0]]))
    return points


######### cuboctahedron #########
# has nz4flow
def gen_points4():
    return conf1([[1.0, 1.0, 0.0]])


######### rhombicuboctahedron #########
# no triangles
def gen_points5():
    c0 = 1.0 + sqrt(2)
    return conf1([[1.0, 1.0, c0]])


######### truncated cuboctahedron #########
# no triangles
def gen_points6():
    c0 = sqrt(2)
    a = 1.0
    b = 1.0 + c0
    c = 1.0 + 2.0 * c0
    return conf2([[a, b, c]])


######### icosidodecahedron #########
# no nz4flow; has nz5flow
def gen_points7():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.5, phi / 2, (1.0 + phi) / 2
    points = conf1([[a, b, c]])
    points.extend(conf1([[0.0, 0.0, phi]]))
    # points = rotate1(points)
    return points


######### smaller part of icosidodecahedron #########
# no nz4flow; has nz5flow
def gen_points8():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.5, phi / 2, (1.0 + phi) / 2
    return [\
            [0.0, 0.0, phi], [0.0, phi, 0.0], [phi, 0.0, 0.0], \
            [a, b, c], [a, b, -c], \
            [b, c, a], [b, c, -a], \
            [c, a, b], [c, -a, -b], [c, -a, b]]


#### trying to extend icosidodecahedron ####
# idea is to get something other than petersen graph
# for now nothing interesting
def gen_points9():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.5, phi / 2, (1.0 + phi) / 2
    points = conf1(([[0.0, 0.0, phi]]))
    points.extend(conf2([[a, b, c]]))
    return points


###### truncated icosahedron ######
# no triangles
def gen_points10():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.0, 1.0, 3.0 * phi
    points = conf1([[a, b, c]])
    a, b, c = 2.0, 1.0 + 2.0 * phi, phi
    points.extend(conf1([[a, b, c]]))
    a, b, c = 1.0, 2.0 + phi, 2.0 * phi
    points.extend(conf1([[a, b, c]]))
    return points


###### pentakis dodecahedron ######
# no triangles
def gen_points11():
    c0 = 3.0 * (sqrt(5) - 1.0) / 4
    c1 = 9.0 * (9.0 + sqrt(5)) / 76
    c2 = 9.0 * (7.0 + 5 * sqrt(5)) / 76
    c3 = 3.0 * (1.0 + sqrt(5)) / 4
    points = conf1([[0.0, c0, c3]])
    points.extend(conf1([[c1, 0.0, c2]]))
    points.extend(plus_minus([[1.5, 1.5, 1.5]]))
    return points


###### rhombicosidodecahedron ######
# no triangles
def gen_points12():
    c0 = (1.0 + sqrt(5)) / 4
    c1 = (3.0 + sqrt(5)) / 4
    c2 = (1.0 + sqrt(5)) / 2
    c3 = (5.0 + sqrt(5)) / 4
    c4 = (2.0 + sqrt(5)) / 2
    points = conf1([[0.5, 0.5, c4]])
    points.extend(conf1([[0.0, c1, c3]]))
    points.extend(conf1([[c1, c0, c2]]))
    return points


###### tetrakis cube ######
# no triangles
def gen_points13():
    c0 = (3.0 + sqrt(2)) / 4
    c1 = (9.0 + sqrt(2)) / 8
    points = conf1([[0, 0, c1]])
    points.extend(plus_minus([[c0, c0, c0]]))
    return points


###### pentakis icosidodecahedron ######
# no nz4flow, has nz5flow
def gen_points14():
    c0 = sqrt(5 * (5 - 2 * sqrt(5))) / 5
    c1 = sqrt(10 * (5 - sqrt(5))) / 10
    c2 = (6 * sqrt(5) + sqrt(2 * (85 - sqrt(5))) - 16) / 19
    c3 = sqrt(10 * (5 + sqrt(5))) / 10
    c4 = (7 - 5 * sqrt(5) + sqrt(2 * (125 + 41 * sqrt(5)))) / 19
    c5 = sqrt(10 * (5 - sqrt(5))) / 5

    points = conf1([[0.0, 0.0, c5]])
    points.extend(conf1([[c2, 0.0, c4]]))
    points.extend(conf1([[c0, c1, c3]]))
    return points


###### tetrakis cuboctahedron ######
# has nz4flow
def gen_points15():
    c0 = sqrt(6) / 3
    c1 = sqrt(6) - sqrt(2)
    points = conf1([[0.0, 0.0, c1]])
    points.extend(conf1([[c0, 0.0, c0]]))
    return points


###### geodesic icosahedron pattern 14 [6, 0] ######
# no triangles
def gen_points16():
    c0  = 0.0909559939462343389847801364994
    c1  = 0.105092395327782055492104752016
    c2  = 0.147169889685536836363696394237
    c3  = 0.170785292063931857260866639641
    c4  = 0.180817893354399205833943539451
    c5  = 0.200982795505730775757657363193
    c6  = 0.206080042477829123503454872524
    c7  = 0.210184790655564110984209504031
    c8  = 0.276336407338019424631905013916
    c9  = 0.305838917948831476550342030089
    c10 = 0.310722295892874653632807639432
    c11 = 0.3251969942822420068809995620148
    c12 = 0.3508609609538912181184546490251
    c13 = 0.358831512545503044771934201090
    c14 = 0.389962309302013003311080884206
    c15 = 0.397661892549353706541303645909
    c16 = 0.407062837983559899261112235717
    c17 = 0.462612564821063663333710003467
    c18 = 0.4809183032482473422958610207054
    c19 = 0.502754287877135762033408397924
    c20 = 0.502759235817073045513978386020
    c21 = 0.520904028553383230402965758599
    c22 = 0.526810245041234649133122457362
    c23 = 0.580601583533158225629807547928
    c24 = 0.5821753252868509011822470440051
    c25 = 0.628088192933784178659557414942
    c26 = 0.632655632420555675618221113041
    c27 = 0.658641507414391627337745658639
    c28 = 0.665643056387631460153839105283
    c29 = 0.672797355476627774317919507498
    c30 = 0.732259832265801906142111797732
    c31 = 0.737748027748337731110325865057
    c32 = 0.752960617350782758443113683646
    c33 = 0.771194171661719027524877479559
    c34 = 0.778142160467593159278524983493
    c35 = 0.813481531709947699146786025452
    c36 = 0.852396882098378412518464723866
    c37 = 0.85361524883102698015186304694952
    c38 = 0.859624302920122403095403021832
    c39 = 0.869098154413827498263305119993
    c40 = 0.918565921102736936944269404508
    c41 = 0.925312050153129995642221377730
    c42 = 0.939433096078661270401741749018
    c43 = 0.941979463725650884785744119200
    c44 = 0.983516593374446893736675762066
    c45 = 0.983838501696633634218745220654
    c46 = 1.00551847163414609102795677204


    points = []
    points = conf1([[0.0, 0.0, c46]])
    points = conf1([[c6, 0.0, c45]])
    points = conf1([[c1, c4, c44]])
    points = conf1([[c9, c3, c43]])
    points = conf1([[0.0, c13, c42]])
    points = conf1([[0.0, c41, c14]])
    points = conf1([[c7, c12, c40]])
    points = conf1([[c18, c2, c39]])
    points = conf1([[c16, c11, c38]])
    points = conf1([[c1, c21, c37]])
    points = conf1([[0.0, c36, c22]])
    points = conf1([[c10, c20, c35]])
    points = conf1([[c25, c0, c34]])
    points = conf1([[c24, c8, c33]])
    points = conf1([[0.0, c28, c32]])
    points = conf1([[c19, c17, c31]])
    points = conf1([[c5, c27, c30]])
    points = conf1([[c15, c26, c29]])
    points = plus_minus([[c23, c23, c23]])

    return points


###### geodesic icosahedron pattern 15 [4, 3] ######
# no triangles
def gen_points17():
    c0  = 0.0150124452580527908978445408401
    c1  = 0.0281991797825302780244189642284
    c2  = 0.0332027765194070511303595165176
    c3  = 0.0515387823817814074231838892257
    c4  = 0.0589933731016308516944966816290
    c5  = 0.0685875359894132927988608240304
    c6  = 0.0769068044612881303250393417126
    c7  = 0.0848760774350141640286094273454
    c8  = 0.101197451143064732053976011790
    c9  = 0.102082095789502183482232575336
    c10 = 0.120126318371194700222044713256
    c11 = 0.135850307191429061995459326559
    c12 = 0.139450268842559032482129187208
    c13 = 0.144460730295782666095031000354
    c14 = 0.146869511123424781553629898922
    c15 = 0.148728470266282843313221316446
    c16 = 0.170093505585318257608833797424
    c17 = 0.19008796163878552422014477524502
    c18 = 0.218852314262719080668885180028
    c19 = 0.223816726514585799002600884407
    c20 = 0.237932402980931245477691901894
    c21 = 0.250641902739473110089272730609
    c22 = 0.261941551440738282244114061648
    c23 = 0.263586890409805198124967780032
    c24 = 0.264350508961270935694247323670
    c25 = 0.279369603001210862344808872311
    c26 = 0.283844679258880161219632247126
    c27 = 0.303728391697733244697494607374
    c28 = 0.308419849822072069289880487468
    c29 = 0.314305597052161603507092226992
    c30 = 0.328940294231932559553288057933
    c31 = 0.346978392042311774712990014796
    c32 = 0.366679925541271271643105378610
    c33 = 0.373490168100211111260490451936
    c34 = 0.399181674487175767535701654337
    c35 = 0.408811239257053601789278324024
    c36 = 0.409957707586146937800253542938
    c37 = 0.413103856095283708496130936218
    c38 = 0.424970152844199728698098083778
    c39 = 0.449563765783095379639841301553
    c40 = 0.4544384706000564599143920989153
    c41 = 0.4574502753266285393545066050648
    c42 = 0.457955356477789130530050193437
    c43 = 0.475572263889713294742723027272
    c44 = 0.478031330053739917621035562969
    c45 = 0.509884049304465086785873908508
    c46 = 0.526775398650823137653292693710
    c47 = 0.5318522261715083358440447123247
    c48 = 0.546618866043153210419896386999
    c49 = 0.549407976428705970282382730147
    c50 = 0.550436234216904620360158698447
    c51 = 0.559061752561545179379153218076
    c52 = 0.573698623110482572011319400224
    c53 = 0.586896143904716291503869063782
    c54 = 0.612784973490812720772920305059
    c55 = 0.620861013739942442602934087148
    c56 = 0.622622575956865603555445938780
    c57 = 0.629363844151998671947635881664
    c58 = 0.630010367675659787007918621764
    c59 = 0.650605427571770702336358741937
    c60 = 0.672399796121723850026117976374
    c61 = 0.6881808422582644641340871963352
    c62 = 0.68966965988340831666428614742546
    c63 = 0.695382678307559784832198506959
    c64 = 0.707097711443880896764980958088
    c65 = 0.716380022040794742158506160564
    c66 = 0.734487411869345432498323055190
    c67 = 0.753292157480828624337335908926
    c68 = 0.758472883148294665550905265339
    c69 = 0.764522955967441088277522253728
    c70 = 0.767690188388752483628682571708
    c71 = 0.782878479076130978381754102483
    c72 = 0.805748458167435372172754243811
    c73 = 0.812053975090659199536767558384
    c74 = 0.8122855305824594760318325905551
    c75 = 0.827066420348711990434612099224
    c76 = 0.842252189430984566385828405882
    c77 = 0.851558441739663562860011958442
    c78 = 0.852340499454307338508999871652
    c79 = 0.864741831269066223867250925440
    c80 = 0.879757621522193840884430922670
    c81 = 0.893597258085464985132886401796
    c82 = 0.903973224810000120759651440936
    c83 = 0.905342394271719447104535164261
    c84 = 0.913251426233723931590743570173
    c85 = 0.935986686531529048151085756406
    c86 = 0.937783693974070741237516369132
    c87 = 0.958304138383931231500923939597
    c88 = 0.9678394057822542173159241019448
    c89 = 0.969039262884619179009095019737
    c90 = 0.989302501498136875198551317389

    points = []
    points.extend(conf1([[c7, c4, 1.0]]))
    points.extend(conf1([[c9, c14, c90]]))
    points.extend(conf1([[c24, c1, c89]]))
    points.extend(conf1([[c5, c23, c88]]))
    points.extend(conf1([[c21, c16, c87]]))
    points.extend(conf1([[c26, c19, c86]]))
    points.extend(conf1([[c10, c31, c85]]))
    points.extend(conf1([[c36, c6, c84]]))
    points.extend(conf1([[c20, c32, c83]]))
    points.extend(conf1([[c38, c8, c82]]))
    points.extend(conf1([[c3, c42, c81]]))
    points.extend(conf1([[c35, c22, c80]]))
    points.extend(conf1([[c27, c37, c79]]))
    points.extend(conf1([[c46, 0.0, c78]]))
    points.extend(conf1([[c40, c25, c77]]))
    points.extend(conf1([[c11, c47, c76]]))
    points.extend(conf1([[c49, c15, c75]]))
    points.extend(conf1([[c18, c50, c74]]))
    points.extend(conf1([[c52, c12, c73]]))
    points.extend(conf1([[c34, c39, c72]]))
    points.extend(conf1([[c2, c57, c71]]))
    points.extend(conf1([[c51, c30, c70]]))
    points.extend(conf1([[c59, c0, c69]]))
    points.extend(conf1([[c43, c41, c68]]))
    points.extend(conf1([[c29, c53, c67]]))
    points.extend(conf1([[c54, c28, c66]]))
    points.extend(conf1([[c13, c62, c65]]))
    points.extend(conf1([[c61, c17, c64]]))
    points.extend(conf1([[c33, c56, c63]]))
    points.extend(conf1([[c48, c45, c60]]))
    points.extend(conf1([[c44, c55, c58]]))

    return points


###### repelling 60 points ######
# no triangles
def gen_points18():
    return [\
            [-0.294370896498, -0.812394048781, 0.503350459223], \
            [0.752216332025, -0.142498183101, -0.643323291703], \
            [0.159963915, -0.746908213504, 0.645398842963], \
            [-0.403365664917, -0.0241357415383, -0.91472050723], \
            [-0.967150743583, 0.190462462804, -0.168355247763], \
            [0.433980285359, 0.787759478703, -0.437145417033], \
            [0.783770177613, -0.0685743002843, 0.617253492518], \
            [0.623015626378, -0.623685224895, -0.472089260137], \
            [-0.968106257964, -0.229174787695, 0.101238283153], \
            [-0.397867799346, 0.912465933867, 0.0954313039639], \
            [0.347531316191, 0.776941829536, 0.524960358297], \
            [-0.000186386042119, 0.0098023955473, 0.999951937996], \
            [-0.0396951477983, 0.310035499752, -0.949895933318], \
            [-0.448686557286, -0.0673049120986, 0.891151178038], \
            [0.376246706127, -0.376442609178, 0.846598711388], \
            [0.426062593572, 0.0712966620809, -0.901879954503], \
            [-0.772941105113, 0.633425685776, 0.0365232614391], \
            [0.94077127939, 0.231181278264, 0.248001242849], \
            [0.791960600169, 0.578939932213, -0.193976706513], \
            [-0.608230660464, -0.389715892114, -0.691503425231], \
            [0.726572801773, 0.637803636953, 0.255535681293], \
            [0.736692599024, 0.333554561353, -0.588239210818], \
            [-0.149657233548, 0.774324430171, 0.614836880227], \
            [0.187784433255, 0.48061952301, 0.85658734565], \
            [-0.922865100212, 0.258150493884, 0.285794207986], \
            [-0.82790478068, -0.156947416, 0.538461867487], \
            [-0.574685650731, 0.670955084872, 0.468567686602], \
            [0.949616156599, -0.237284936548, 0.204755986512], \
            [0.382794216856, -0.421923623685, -0.821857069884], \
            [0.679561776503, -0.517092441316, 0.520395233501], \
            [0.0249486911364, 0.971473683955, 0.235831389328], \
            [-0.530062815352, -0.482826380866, 0.69707395427], \
            [0.435069328319, 0.072415766478, 0.897480159291], \
            [-0.746354958051, 0.52211577466, -0.412734048078], \
            [0.158066676116, -0.775807450011, -0.6108500032], \
            [0.0282597599075, -0.166544606267, -0.985628875436], \
            [-0.175098696966, -0.538655444039, -0.82413030458], \
            [-0.758518590299, -0.622851684125, -0.191586345424], \
            [-0.418961857044, 0.830620175109, -0.366798428356], \
            [-0.046417072752, 0.745995796243, -0.66433103747], \
            [-0.900449640634, -0.23153427988, -0.368215048474], \
            [-0.419983203032, -0.768154941622, -0.483272278154], \
            [-0.446973570689, -0.893587105709, 0.0414332187517], \
            [0.915061000538, -0.310647044831, -0.257219320489], \
            [0.649941609106, 0.40148079742, 0.645282166231], \
            [0.0176011523752, 0.969350410531, -0.245050976408], \
            [-0.275310265395, 0.402958626495, 0.872827934418], \
            [0.967911724308, 0.139264859203, -0.209170248691], \
            [-0.0800958654353, -0.961742498002, -0.261984770314], \
            [0.383963187072, -0.906014817298, -0.178071395259], \
            [0.0163241861327, -0.980327532442, 0.196701423695], \
            [-0.753514759889, 0.11315182473, -0.647620391271], \
            [-0.432601383483, 0.476331624218, -0.765483002279], \
            [-0.680732085758, 0.281672997245, 0.676213095143], \
            [0.444126939796, -0.844375968074, 0.299633919787], \
            [-0.101541199506, -0.445627513023, 0.889441119153], \
            [0.43364434114, 0.900929684861, 0.0166819762962], \
            [0.348057660084, 0.514940914248, -0.783384784184], \
            [0.759439804432, -0.650168196364, 0.0230759589635], \
            [-0.738742653333, -0.607453603438, 0.291992143416]]



# more accurate 60 repelling points
# no triangles
def gen_points19():
    return [ \
            [-0.296549696061, 0.503903807606, 0.811257807633], \
            [0.533083266191, 0.302848709722, 0.790003095137], \
            [-0.9717679084, -0.212822075694, 0.101852325949], \
            [-0.0347096526369, -0.431762094038, 0.90131944069], \
            [-0.12895024941, -0.701621073586, -0.700785061397], \
            [0.231102204102, 0.932877908886, 0.276279891362], \
            [-0.354307689224, -0.767939854313, 0.533605136327], \
            [0.0710030519253, 0.495614663352, -0.865635415223], \
            [0.454352401453, -0.82645758835, 0.332463155782], \
            [-0.806339347493, 0.591444807114, 0.00314592160499], \
            [-0.736479276244, -0.592457729862, 0.326484477411], \
            [0.0846116267701, 0.264998771484, 0.960529293529], \
            [0.793821182428, -0.503447876138, 0.341157099207], \
            [0.327758702512, -0.779994242465, -0.533088374146], \
            [0.315231622365, -0.128571107632, 0.940265119285], \
            [-0.973396638661, 0.178999758055, -0.143031711376], \
            [0.852104887386, 0.320517427055, 0.413746105537], \
            [-0.505827925967, 0.796182034922, -0.332012464494], \
            [-0.774600211785, 0.410867719947, -0.480814131041], \
            [-0.458344166691, 0.879312953271, 0.129342008139], \
            [-0.0258797490922, -0.977276964012, 0.210380546151], \
            [0.867903797279, 0.0694971377595, -0.491846669718], \
            [0.346759395015, -0.932138506467, -0.104286752416], \
            [-0.265838996108, 0.161509534088, -0.950391655344], \
            [0.963950004756, 0.258289400436, -0.0639294451251], \
            [-0.817896067825, -0.180524833925, 0.546312004786], \
            [0.0921575056059, -0.771719476552, 0.629250382336], \
            [0.693468709722, -0.495071826241, -0.523454903023], \
            [-0.908960505796, 0.243771417425, 0.3381808613], \
            [0.736399818417, -0.108424302233, 0.667801975229], \
            [-0.0695402440681, 0.994142880947, -0.0827289956313], \
            [0.965211186188, -0.100639365997, 0.24132775238], \
            [-0.212091311861, -0.292479345744, -0.932455418637], \
            [-0.0871619973137, -0.956336488539, -0.278968290156], \
            [0.557586021792, 0.679120418224, 0.477381698279], \
            [0.395070680972, 0.904099376899, -0.16286028898], \
            [-0.491325196637, -0.395843974445, 0.775826719729], \
            [0.476190611344, -0.508339858053, 0.717518703855], \
            [0.595253987027, -0.144584264353, -0.79042272325], \
            [0.366547184129, 0.729100009925, -0.577976069863], \
            [-0.630069100448, 0.179231736753, 0.755571911337], \
            [0.945690682062, -0.267934408475, -0.184065984405], \
            [-0.494802897346, -0.765741645297, -0.410864728878], \
            [-0.890331375078, -0.179825091951, -0.418297715577], \
            [-0.465513321227, -0.883151042053, 0.0578064415203], \
            [-0.656799438983, 0.0537690381531, -0.752145855195], \
            [0.733892679611, 0.676826334409, 0.0575121540573], \
            [0.248364054668, -0.447862220508, -0.858914854797], \
            [-0.808889157092, -0.565789868919, -0.159937974751], \
            [-0.588202299545, -0.417547172142, -0.692583867734], \
            [0.729550939631, -0.677672552082, -0.0922785925238], \
            [-0.400506920706, 0.550564988273, -0.732442762374], \
            [0.168900595422, 0.665694801203, 0.726858322177], \
            [-0.184746885887, 0.855049469103, 0.484519342794], \
            [-0.634241481321, 0.602082907304, 0.485009191772], \
            [0.531292065049, 0.324941100731, -0.782395055373], \
            [0.187085628299, 0.0256080244569, -0.982009774273], \
            [-0.0713973516646, 0.849436455601, -0.522838527723], \
            [-0.266550195763, -0.0219925142232, 0.963570092135], \
            [0.747624112853, 0.535613620132, -0.392652818416]]


###### geodesic icosahedron pattern 3 [2, 1] (pentakis snub dodecahedron) ######
# no triangles
def gen_points20():
    c0  = 0.0919831947610306166536978645902
    c1  = 0.157802827551188752848878549936
    c2  = 0.1787372607291718755716205007246
    c3  = 0.2707204554902024922253183653148
    c4  = 0.306634763068337552375856521956
    c5  = 0.347313533259692355979268469051
    c6  = 0.404162274015810538852548576480
    c7  = 0.5260507939888642315508889697754
    c8  = 0.5335632139999518363605442871496
    c9  = 0.595837725984189461147451423520
    c10 = 0.6748827295060130310778669417953
    c11 = 0.693365236931662447624143478044
    c12 = 0.785348431692693064277841342634
    c13 = 0.832685557057201783926745491732
    c14 = 0.863323415398555806964420242008
    c15 = 0.943151259243881817126719892570
    points = []
    points.extend(conf1([[c2, c1, 1.0]]))
    points.extend(conf1([[c3, c4, c15]]))
    points.extend(conf1([[c14, c8, 0.0]]))
    points.extend(conf1([[c0, c9, c13]]))
    points.extend(conf1([[c7, c6, c12]]))
    points.extend(conf1([[c10, c5, c11]]))
    return points



###### snub dodecahedron (laevo) / snub icosidodecahedron ######
# no triangles
def gen_points21():
    c0  = 0.192893711352359022108262546061
    c1  = 0.330921024729844230963655269187
    c2  = 0.374821658114562295266609516608
    c3  = 0.567715369466921317374872062669
    c4  = 0.643029605914072573107464141441
    c5  = 0.728335176957191477360671629838
    c6  = 0.847550046789060797396217956030
    c7  = 1.103156835071753772627281146446
    c8  = 1.24950378846302719500774109632
    c9  = 1.41526541625598211477109001870
    c10 = 1.45402422933801541929649491091
    c11 = 1.64691794069037444140475745697
    c12 = 1.74618644098582634573474528789
    c13 = 1.97783896542021867236841272616
    c14 = 2.097053835252087992403959052348
    points = []
    points.extend(conf1([[c2, c1, c14]]))
    points.extend(conf1([[c3, c4, c13]]))
    points.extend(conf1([[c0, c8, c12]]))
    points.extend(conf1([[c7, c6, c11]]))
    points.extend(conf1([[c9, c5, c10]]))
    return points



###### snub dodecahedron (dextro) ######
# no triangles
def gen_points22():
    c0  = 0.192893711352359022108262546061
    c1  = 0.330921024729844230963655269187
    c2  = 0.374821658114562295266609516608
    c3  = 0.567715369466921317374872062669
    c4  = 0.643029605914072573107464141441
    c5  = 0.728335176957191477360671629838
    c6  = 0.847550046789060797396217956030
    c7  = 1.103156835071753772627281146446
    c8  = 1.24950378846302719500774109632
    c9  = 1.41526541625598211477109001870
    c10 = 1.45402422933801541929649491091
    c11 = 1.64691794069037444140475745697
    c12 = 1.74618644098582634573474528789
    c13 = 1.97783896542021867236841272616
    c14 = 2.097053835252087992403959052348
    points = []
    points.extend(conf1([[c2, c1, c14]]))
    points.extend(conf1([[c3, c4, c13]]))
    points.extend(conf1([[c0, c8, c12]]))
    points.extend(conf1([[c7, c6, c11]]))
    points.extend(conf1([[c9, c5, c10]]))
    return points


###### truncated cube ######
# no triangles
def gen_points23():
    c0 = (1.0 + sqrt(2)) / 2.0
    return conf1([[c0, c0, 0.5]])


###### random points, satisfying great circles triangles ######
# no triangles
def gen_points24():
    a = sqrt(2.0 / 3)
    b = -a / 2
    c = -a - b
    points = []
    points.extend(conf1([[a, b, c]]))
    points.extend(conf1([[0, 0, 1]]))
    return points


###### truncated dodecahedron ######
# no triangles
def gen_points25():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.0, 1.0 / phi, 2.0 + phi
    points = conf1([[a, b, c]])
    a, b, c = 1.0 / phi, phi, 2.0 * phi
    points.extend(conf1([[a, b, c]]))
    a, b, c = phi, 2.0, phi + 1.0
    points.extend(conf1([[a, b, c]]))
    return points


###### small icosicosidodecahedron ######
# no triangles
def gen_points26():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 0.0, phi, 2.0 - 1.0 / phi
    points = conf1([[a, b, c]])
    a, b, c = phi, 1.0 / phi, 2.0 / phi
    points.extend(conf1([[a, b, c]]))
    a, b, c = 1.0 / (phi ** 2), 1.0 / phi, 2.0
    points.extend(conf1([[a, b, c]]))
    return points


###### truncated great icosahedron ######
# no triangles
def gen_points27():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 1.0, 0, 3.0 / phi
    points = conf1([[a, b, c]])
    a, b, c = 2.0, 1.0 / phi, 1.0 / (phi ** 3)
    points.extend(conf1([[a, b, c]]))
    a, b, c = (1.0 + 1.0 / (phi ** 2)), 1.0, 2.0 / phi
    points.extend(conf1([[a, b, c]]))
    return points


###### quasirhombicosidodecahedron ######
# no triangles
def gen_points28():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 1.0 / (phi ** 2), 0, 2.0 - 1.0 / phi
    points = conf1([[a, b, c]])
    a, b, c = 1.0, 1.0 / (phi ** 3), 1
    points.extend(conf1([[a, b, c]]))
    a, b, c = 1.0 / phi, 1.0 / (phi ** 2), 2.0 / phi
    points.extend(conf1([[a, b, c]]))
    return points


###### truncated icosidodecahedron ######
# no triangles
def gen_points29():
    phi = (1.0 + sqrt(5)) / 2
    a, b, c = 1.0 / phi, 1.0 / phi, 3.0 + phi
    points = conf1([[a, b, c]])
    a, b, c = 2.0 / phi, phi, 1.0 + 2.0 * phi
    points.extend(conf1([[a, b, c]]))
    a, b, c = 1.0 / phi, phi ** 2, -1.0 + 3.0 * phi
    points.extend(conf1([[a, b, c]]))
    a, b, c = 2.0 * phi - 1.0, 2.0, 2.0 + phi
    points.extend(conf1([[a, b, c]]))
    a, b, c = phi, 3, 2.0 * phi
    points.extend(conf1([[a, b, c]]))
    return points


###### rhombic triacontahedron ######
# no triangles
def gen_points30():
    c0 = sqrt(5) / 4
    c1 = (5.0 + sqrt(5)) / 8
    c2 = (5.0 + 3 * sqrt(5)) / 8
    points = []
    points.extend(conf1([[c1, 0.0, c2]]))
    points.extend(conf1([[0.0, c0, c2]]))
    points.extend(conf0([[c1, c1, c1]]))
    return points


###### disdyakis triacontahedron ######
# no nz4flow, has nz5flow
def gen_points31():
    c0 = 3 * (15 + sqrt(5)) / 44
    c1 = (5 - sqrt(5)) / 2
    c2 = 3 * (5 + 4 * sqrt(5)) / 22
    c3 = 3 * (5 + sqrt(5)) / 10
    c4 = sqrt(5)
    c5 = (75 + 27 * sqrt(5)) / 44
    c6 = (15 + 9 * sqrt(5)) / 10
    c7 = (5 + sqrt(5)) / 2
    c8 = 3 * (5 + 4 * sqrt(5)) / 11

    points = []
    points.extend(conf1([[0.0, 0.0, c8]]))
    points.extend(conf1([[0.0, c1, c7]]))
    points.extend(conf1([[0.0, c6, c3]]))
    points.extend(conf1([[c0, c2, c5]]))
    points.extend(conf0([[c4, c4, c4]]))
    return points


###### truncated icosahedron ######
# no triangles
def gen_points32():
    phi = (1.0 + sqrt(5)) / 2
    points = []
    points.extend(conf1([[0.0, 1.0, 3.0 * phi]]))
    points.extend(conf1([[1.0, 2.0 + phi, 2.0 * phi]]))
    points.extend(conf1([[2.0, 1.0 + 2.0 * phi, phi]]))
    return points


###### great dirhombicosidodecahedron ######
# no triangles
def gen_points33():
    phi = (1.0 + sqrt(5)) / 2
    points = []
    points.extend(conf1([[0.0, 2.0 / phi, 2.0 / sqrt(phi)]]))
    points.extend(conf1([[-1.0 + 1.0 / sqrt(phi ** 3),
                          1.0 / (phi ** 2) - 1.0 / sqrt(phi),
                          1.0 / phi + sqrt(phi)]]))
    points.extend(conf1([[-1.0 / phi + sqrt(phi),
                          -1.0 - 1.0 / sqrt(phi ** 3),
                          1.0 / (phi ** 2) + 1.0 / sqrt(phi)]]))
    return points



###### dodecadodecahedron ######
# no nz4flow, has nz5flow
def gen_points34():
    c0 = (sqrt(5) - 1.0) / 4
    c1 = (1.0 + sqrt(5)) / 4
    points = []
    points.extend(conf1([[0.0, 0.0, 1.0]]))
    points.extend(conf1([[c0, 0.5, c1]]))
    return points


###### deltoidal hexecontahedron ######
# no nz4flow, has nz5flow
def gen_points35():
    c0 = (5 - sqrt(5)) / 4
    c1 = (15 + sqrt(5)) / 22
    c2 = sqrt(5) / 2
    c3 = (5 + sqrt(5)) / 6
    c4 = (5 + 4 * sqrt(5)) / 11
    c5 = (5 + sqrt(5)) / 4
    c6 = (5 + 3 * sqrt(5)) / 6
    c7 = (25 + 9 * sqrt(5)) / 22
    c8 = sqrt(5)

    points = []
    points.extend(conf1([[0.0, 0.0, c8]]))
    points.extend(conf1([[0.0, c1, c7]]))
    points.extend(conf1([[0.0, c6, c3]]))
    points.extend(conf1([[c0, c2, c5]]))
    points.extend(conf0([[c4, c4, c4]]))
    return points


###### triakis icosahedron ######
# no triangles
def gen_points36():
    c0 = 5 * (7 + sqrt(5)) / 44
    c1 = 5 * (3 + 2 * sqrt(5)) / 22
    c2 = (5 + sqrt(5)) / 4
    c3 = 5 * (13 + 5 * sqrt(5)) / 44
    c4 = (5 + 3 * sqrt(5)) / 4

    points = []
    points.extend(conf1([[0.0, c4, c2]]))
    points.extend(conf1([[0.0, c0, c3]]))
    points.extend(conf0([[c1, c1, c1]]))
    return points



###### snub dodecahedron ######
# no triangles
def gen_points37():
    phi = (1 + sqrt(5)) / 2
    x = cbrt((phi + sqrt(phi-5/27))/2) + cbrt((phi - sqrt(phi-5/27))/2)

    c0  = phi * sqrt(3 - (x ** 2)) / 2
    c1  = x * phi * sqrt(3 - (x ** 2)) / 2
    c2  = phi * sqrt((x - 1 - (1/x)) * phi) / 2
    c3  = (x ** 2) * phi * sqrt(3 - (x ** 2)) / 2
    c4  = x * phi * sqrt((x - 1 - (1/x)) * phi) / 2
    c5  = phi * sqrt(1 - x + (phi + 1) / x) / 2
    c6  = phi * sqrt(x - phi + 1) / 2
    c7  = (x ** 2) * phi * sqrt((x - 1 - (1/x)) * phi) / 2
    c8  = x * phi * sqrt(1 - x + (phi + 1) / x) / 2
    c9  = sqrt((x + 2) * phi + 2) / 2
    c10 = x * sqrt(x * (phi + 1) - phi) / 2
    c11 = sqrt((x ** 2) * (2 * phi + 1) - phi) / 2
    c12 = phi * sqrt((x ** 2) + x) / 2
    c13 = (phi ** 2) * sqrt(x * (x + phi) + 1) / (2 * x)
    c14 = phi * sqrt(x * (x + phi) + 1) / 2

    points = []
    points.extend(conf1([[c2, c1, c14]]))
    points.extend(conf1([[c0, c8, c12]]))
    points.extend(conf1([[c7, c6, c11]]))
    points.extend(conf1([[c3, c4, c13]]))
    points.extend(conf1([[c9, c5, c10]]))
    return points


###### pentagonal hexecontahedron ######
# no triangles
def gen_points38():
    phi = (1 + sqrt(5)) / 2
    x = cbrt((phi + sqrt(phi-5/27))/2) + cbrt((phi - sqrt(phi-5/27))/2)
    c0  = phi * sqrt(3 - (x ** 2)) / 2
    c1  = phi * sqrt((x - 1 - (1/x)) * phi) / (2 * x)
    c2  = phi * sqrt((x - 1 - (1/x)) * phi) / 2
    c3  = (x ** 2) * phi * sqrt(3 - (x ** 2)) / 2
    c4  = phi * sqrt(1 - x + (phi + 1) / x) / 2
    c5  = sqrt(x * (x + phi) + 1) / (2 * x)
    c6  = sqrt((x + 2) * phi + 2) / (2 * x)
    c7  = sqrt(-(x ** 2) * (phi + 2) + x * (3 * phi + 1) + 4) / 2
    c8  = (phi + 1) * sqrt(1 + (1/x)) / (2 * x)
    c9  = sqrt(3 * phi + 2 - 2 * x + (3/x)) / 2
    c10 = sqrt((x ** 2)*(225*phi + 392) + x*(670*phi + 249) + (157*phi + 470))/62
    c11 = phi * sqrt(x * (x + phi) + 1) / (2 * x)
    c12 = phi * sqrt((x ** 2) + x + phi + 1) / (2 * x)
    c13 = phi * sqrt((x ** 2) + 2 * x * phi + 2) / (2 * x)
    c14 = sqrt((x ** 2) * (2 * phi + 1) - phi) / 2
    c15 = phi * sqrt((x ** 2) + x) / 2
    c16 = (phi ** 3) * sqrt(x * (x + phi) + 1) / (2 * (x ** 2))
    c17 = sqrt((x ** 2)*(842*phi + 617) + x*(1589*phi + 919) + (784*phi + 627))/62
    c18 = (phi ** 2) * sqrt(x * (x + phi) + 1) / (2 * x)
    c19 = phi * sqrt(x * (x + phi) + 1) / 2

    points = []
    points.extend(conf1([[c0, c1, c19]]))
    points.extend(conf1([[0.0, c5, c18]]))
    points.extend(conf1([[0.0, c17, c10]]))
    points.extend(conf1([[c3, c6, c16]]))
    points.extend(conf1([[c2, c9, c15]]))
    points.extend(conf1([[c7, c8, c14]]))
    points.extend(conf1([[c4, c12, c13]]))
    points.extend(conf0([[c11, c11, c11]]))
    return points


###### geodesic rhombic triacontahedron pattern 2 [2, 0] ######
# no nz4flow, has nz5flow
def gen_points39():
    c0  = 0.206465110080514061294782900823
    c1  = 0.239864162531466851799568285477
    c2  = 0.312960201719001714124643095830
    c3  = 0.357930572720316545646748465864
    c4  = 0.388108367658942385458315129367
    c5  = 0.5063802435073680418460798635004
    c6  = 0.543415410301305287194192403164
    c7  = 0.57393172813272714186981270912453
    c8  = 0.579143832274188081473075064760
    c9  = 0.594573477739456446753098030189
    c10 = 0.722175933260202675528559553014
    c11 = 0.819340445226369755970722959331
    c12 = 0.834437640270923298552666315667
    c13 = 0.879264603877981692064235065612
    c14 = 0.937074404994504627119823530624
    c15 = 0.962040095791669527328127838491
    c16 = 1.01276048701473608369215972700

    points = []
    points.extend(conf1([[0.0, 0.0, c16]]))
    points.extend(conf1([[c0, c1, c15]]))
    points.extend(conf1([[0.0, c3, c14]]))
    points.extend(conf1([[0.0, c13, c6]]))
    points.extend(conf1([[0.0, c7, c12]]))
    points.extend(conf1([[c2, c5, c11]]))
    points.extend(conf1([[c9, c4, c10]]))
    points.extend(conf0([[c8, c8, c8]]))
    return points


###### geodesic rhombic triacontahedron pattern 3 [2, 1] ######
# no triangles
def gen_points40():
    c0  = 0.0879563514986484517092502772434
    c1  = 0.0916954802291273147888848233041
    c2  = 0.117715010734370755494619511557
    c3  = 0.138776235907714450068878791769
    c4  = 0.178155412444887179898584958314
    c5  = 0.185729010142072531299237994837
    c6  = 0.205671362233019207203869788801
    c7  = 0.287142639533186441203937601414
    c8  = 0.316240146758582910759479109790
    c9  = 0.324505246049786981368116786606
    c10 = 0.357679012202675970632080983474
    c11 = 0.368622300799157782188169346613
    c12 = 0.372911070154927587105653096132
    c13 = 0.405976523349954215368184599220
    c14 = 0.472871649675258972503175596251
    c15 = 0.478728400969854062163149475961
    c16 = 0.493932874848602667077434876463
    c17 = 0.510938667050403727973021253606
    c18 = 0.539978288995836500928139393993
    c19 = 0.578736798806418113595289133446
    c20 = 0.616755997865330203030517633436
    c21 = 0.62104476722110000794800138295454
    c22 = 0.673426921261674879376691619777
    c23 = 0.684399763202873269367019264762
    c24 = 0.697416316204714568473769882738
    c25 = 0.738759777955470763442620894512
    c26 = 0.789111796433841883262654706042
    c27 = 0.812203157169389329445570411546
    c28 = 0.862555175647760449265604223076
    c29 = 0.8737032247822767860530284193499
    c30 = 0.9038986373985166442344552348502
    c31 = 0.916915190400357943341205852826
    c32 = 0.936415811009094084227370116920
    c33 = 0.989667068020257790136170729567

    points = []
    points.extend(conf1([[c1, c33, c5]]))
    points.extend(conf1([[c0, c4, c33]]))
    points.extend(conf1([[0.0, c10, c32]]))
    points.extend(conf1([[c6, c11, c31]]))
    points.extend(conf1([[c8, c30, c9]]))
    points.extend(conf1([[0.0, c29, c18]]))
    points.extend(conf1([[c2, c17, c28]]))
    points.extend(conf1([[c12, c27, c14]]))
    points.extend(conf1([[c3, c20, c26]]))
    points.extend(conf1([[c15, c25, c16]]))
    points.extend(conf1([[c7, c22, c24]]))
    points.extend(conf1([[c13, c21, c23]]))
    points.extend(conf0([[c19, c19, c19]]))
    return points

###### geodesic rhombic triacontahedron pattern 4 [2, 2] ######
# no nz4flow, has nz5flow
def gen_points41():
    c0  = 0.130856316980679041715062406093
    c1  = 0.183364691682889243997667190771
    c2  = 0.210044322875480944728375403331
    c3  = 0.213388436344685665213445153890
    c4  = 0.235196494982565109085403039376
    c5  = 0.238480078400087554643115993977
    c6  = 0.296690303479559952463471603014
    c7  = 0.311029944924819059200454212862
    c8  = 0.357282985798322523716806842711
    c9  = 0.380555922916634453826311243879
    c10 = 0.421844770082976798640783184747
    c11 = 0.425118404862054371986523547061
    c12 = 0.476126059792573820288118136867
    c13 = 0.503257022407365095872997213099
    c14 = 0.535328369965939697384435193703
    c15 = 0.5569997113292634853461341239446
    c16 = 0.575055348539050325121207879057
    c17 = 0.578096014623731827161044180953
    c18 = 0.590600245792115398554686647210
    c19 = 0.682559175970641260243492115769
    c20 = 0.687856028309942527061196530037
    c21 = 0.718535073562536751104254787761
    c22 = 0.720414776473119669862116083560
    c23 = 0.814286967332184155073451425961
    c24 = 0.825796740774680507640089686586
    c25 = 0.865923867653530504241159306540
    c26 = 0.866179497746968819461668096700
    c27 = 0.901244464654628192274641683928
    c28 = 0.935379000422054350877851023664
    c29 = 0.955611271455684778947519122936
    c30 = 0.979249479450201212706963718784
    c31 = 0.982118116191317857332657671006
    c32 = 1.00651404481473019174599442620

    points = []
    points.extend(conf1([[0.0, 0.0, c32]]))
    points.extend(conf1([[ 0.0,   c3,  c31]]))
    points.extend(conf1([[  c5,  0.0,  c30]]))
    points.extend(conf1([[  c2,   c4,  c29]]))
    points.extend(conf1([[ 0.0,   c8,  c28]]))
    points.extend(conf1([[  c0,  c11,  c27]]))
    points.extend(conf1([[ c14,  0.0,  c26]]))
    points.extend(conf1([[ c10,   c6,  c25]]))
    points.extend(conf1([[ 0.0,  c16,  c24]]))
    points.extend(conf1([[  c7,  c13,  c23]]))
    points.extend(conf1([[ c18,   c9,  c22]]))
    points.extend(conf1([[  c1,  c19,  c21]]))
    points.extend(conf1([[ c12,  c15,  c20]]))
    points.extend(conf0([[ c17,  c17,  c17]]))
    return points


###### great disdyakis triacontahedron ######
# no nz4flow, has nz5flow
def gen_points42():
    c0 = 3 * (25 - 9 * sqrt(5)) / 44
    c1 = 3 * (3 * sqrt(5) - 5) / 10
    c2 = 3 * (4 * sqrt(5) - 5) / 22
    c3 = 3 * (5 - sqrt(5)) / 10
    c4 = 3 * (15 - sqrt(5)) / 44
    c5 = 3 * (4 * sqrt(5) - 5) / 11
    c6 = (5 - sqrt(5)) / 2
    c7 = sqrt(5)
    c8 = (5 + sqrt(5)) / 2

    points = []
    points.extend(conf1([[0.0, 0.0, c5]]))
    points.extend(conf1([[0.0, c6, c8]]))
    points.extend(conf1([[0.0, c3, c1]]))
    points.extend(conf1([[c0, c2, c4]]))
    points.extend(conf0([[c7, c7, c7]]))
    return points


###### rhombidodecadodecahedron ######
# no triangles
def gen_points43():
    phi = (1.0 + sqrt(5)) / 2
    points = []
    points.extend(conf1([[1.0 / (phi ** 2), 0, phi ** 2]]))
    points.extend(conf1([[1.0, 1.0, 2.0 * phi - 1]]))
    points.extend(conf1([[2.0, 1.0 / phi, phi]]))
    return points


###### great stellated truncated dodecahedron ######
# no triangles
def gen_points44():
    phi = (1.0 + sqrt(5)) / 2
    points = []
    points.extend(conf1([[0.0, phi, 2 - 1.0 / phi]]))
    points.extend(conf1([[phi, 1.0 / phi, 2.0 / phi]]))
    points.extend(conf1([[1.0 / phi ** 2, 1.0 / phi, 2]]))
    return points


###### snub icosidodecadodecahedron ######
# no triangles
def gen_points45():
    c0  = 0.105398765906697216676314189282
    c1  = 0.139623637868037118589881535187
    c2  = 0.184961940339626297836961737414
    c3  = 0.245022403774734335266195724469
    c4  = 0.410877732043017261285800591418
    c5  = 0.438898343962682737883306417824
    c6  = 0.525190497798036582742263736641
    c7  = 0.544297109869379954559620607106
    c8  = 0.581416517652346986253630835588
    c9  = 0.695729283407366307710093980810
    c10 = 0.770212901572770918008459461110
    c11 = 0.835352921275403426299975515997
    c12 = 0.955174841912397215845421198524
    c13 = 1.02031486161502972413693725341
    c14 = 1.10660701545038356899589457223

    points = []
    points.extend(conf1([[c0, c2, c14]]))
    points.extend(conf1([[c3, c4, c13]]))
    points.extend(conf1([[c1, c8, c12]]))
    points.extend(conf1([[c7, c6, c11]]))
    points.extend(conf1([[c5, c9, c10]]))
    return points

def gen_points46():
  phi = (1.0 + sqrt(5)) / 2
  vals = [0.0, phi - 1.0, phi - 0.5, phi, phi + 0.5, phi + 1.0, 1.0]
  points = []
  for i0 in range(len(vals)):
    for i1 in range(i0, len(vals)):
      for i2 in range(i1, len(vals)):
        if (i0 == i1 and i1 == i2) and (i0 != 1):
          continue
        maxm0 = 3
        if i0 == 0:
          maxm0 = 2
        maxm1 = 3
        if i1 == 0:
          maxm1 = 2
        for m0 in range(1, maxm0):
          for m1 in range(1, maxm1):
            for m2 in range(1, 3):
              points.extend(conf2([[vals[i0] / m0, vals[i1] / m1, vals[i2] / m2]]))
  return points

def gen_points47():
  phi = (1.0 + sqrt(5)) / 2
  points = []
  w = 2
  for a1 in range(-w, w + 1):
    for b1 in range(-w, w + 1):
      for a2 in range(a1, w + 1):
        for b2 in range(-w, w + 1):
          if a2 == a1 and b2 < b1:
            continue
          for a3 in range(a2, w + 1):
            for b3 in range(-w, w + 1):
              if a3 == a2 and b3 < b2:
                continue
              s1 = a1 ** 2 + b1 ** 2 + a2 ** 2 + b2 ** 2 + a3 ** 2 + b3 ** 2
              s2 = b1 * (2 * a1 + b1) + b2 * (2 * a2 + b2) + b3 * (2 * a3 + b3)
              if s1 != s2:
                continue
              root = round(sqrt(s1))
              if root == 0 or root ** 2 != s1:
                continue
              p1 = (a1 + b1 * phi) / root
              p2 = (a2 + b2 * phi) / root
              p3 = (a3 + b3 * phi) / root
              points.extend(conf2([[p1, p2, p3]]))
  return points


########## snub cube  / snub cuboctahedron ##########
# no triangles
def gen_points48():
    # tribonacci constant
    t = (1 + (19 + 3 * 33 ** 0.5) ** (1/3) + (19 - 3 * 33 ** 0.5) ** (1/3)) / 3
    return conf2([[1, 1/t, t]])


########## pentagonal icositetrahedron ##########
# no triangles
def gen_points49():
    # tribonacci constant
    t = (1 + (19 + 3 * 33 ** 0.5) ** (1/3) + (19 - 3 * 33 ** 0.5) ** (1/3)) / 3
    points = []
    points.extend(conf2([[1, (2*t+1), t**2]]))
    points.extend(conf2([[0, 0, t**3]]))
    points.extend(conf2([[t**2, t**2, t**2]]))
    return points


########## truncated octahedron ##########
# no triangles
def gen_points50():
    points = []
    points.extend(conf2([[0, 1, 2]]))
    # add dual - tetrakis hexahedron
    points.extend(conf2([[3/2, 0, 0]]))
    points.extend(conf2([[1, 1, 1]]))
    return points


###### geodesic rhombic triacontahedron pattern 11 [4, 2] ######
# no nz4flow, has nz5flow
def gen_points51():
    c0   = 0.001035506274421455732176023464646
    c1   = 0.0342646261950882405171563147398
    c2   = 0.0435931431578205176839678244326
    c3   = 0.0471997933336310258974188438407
    c4   = 0.0472231205131520188226410882286
    c5   = 0.0547063385387988790410933107928
    c6   = 0.05516249427707492524676958384549
    c7   = 0.0720608827286855211189589232431
    c8   = 0.07539565740312431949476693456347
    c9   = 0.0798754931836847488434626862271
    c10  = 0.0814877467082402593397974029684
    c11  = 0.0844073368039313992560238587612
    c12  = 0.0951155193473940930024670990063
    c13  = 0.104344421379754940613862519479
    c14  = 0.117371651608357921160003430762
    c15  = 0.130101995941923198535860245356
    c16  = 0.133087660269778847477366232788
    c17  = 0.135553822171060670426305372958
    c18  = 0.137840112561014167318787483959
    c19  = 0.169130283828213537387788651126
    c20  = 0.177238742643272371598524833704
    c21  = 0.178111782567350526214998263177
    c22  = 0.181665851025952673019971345129
    c23  = 0.184403757116437396788981686878
    c24  = 0.199474617340474266123883658888
    c25  = 0.201778988412289320416027289524
    c26  = 0.204252553984084455930067072960
    c27  = 0.2052880602585059116622430964247
    c28  = 0.218496053483891260086538067932
    c29  = 0.220831885801092889282492658136
    c30  = 0.220941378894088381063146010440
    c31  = 0.236347264224036983560025222800
    c32  = 0.238022748571614674791595628749
    c33  = 0.240893703057570214174676840041
    c34  = 0.254733314775061471934725815822
    c35  = 0.275845487216259971334426657449
    c36  = 0.279162600594950994464600984117
    c37  = 0.285429777843218133505001407760
    c38  = 0.286738159793163744598830144528
    c39  = 0.289453965332742530077644642572
    c40  = 0.309812249441414602278303905690
    c41  = 0.314446210925129320662814740531
    c42  = 0.317219673197013343446276718087
    c43  = 0.334862180788533688699083960904
    c44  = 0.337314729901488433442671142847
    c45  = 0.343250029930896316353896965487
    c46  = 0.351223483323636515583559907360
    c47  = 0.356955144748091884819367518242
    c48  = 0.363146773838276086853636213098
    c49  = 0.368023104185384904387279413812
    c50  = 0.369956504083397544416422617021
    c51  = 0.373230834739417087311686911139
    c52  = 0.383453412936965337530147662424
    c53  = 0.384093391010121573029542044908
    c54  = 0.392579100442973546856280890008
    c55  = 0.399127580625552223729546771740
    c56  = 0.405562569599162079837347314321
    c57  = 0.413685599777274138653214141407
    c58  = 0.414737673972218437542546647131
    c59  = 0.418588103633738845328866433329
    c60  = 0.419865969989888924275593870989
    c61  = 0.436172243600794064540248714440
    c62  = 0.465242766213294097749401798915046
    c63  = 0.466873499911774115836683757419
    c64  = 0.471119816358695203097615987702
    c65  = 0.478102239608838536849625034193
    c66  = 0.489969906403093479093371173082
    c67  = 0.490401157295682443363103493898
    c68  = 0.500683876528810081214761596291
    c69  = 0.501286749727269451052589149841
    c70  = 0.502118667519811252055983694506
    c71  = 0.503992464616747226086872612030
    c72  = 0.504597044034005827423861503308
    c73  = 0.511175208930089476445456777214
    c74  = 0.520056303652521208639277824158
    c75  = 0.530377843041903092933077804157
    c76  = 0.5403607024620497998776217575547
    c77  = 0.542269157314898435331450691982
    c78  = 0.545439835125177716962613091953
    c79  = 0.568510323206836073514226494848
    c80  = 0.5726538548256047711434933174146
    c81  = 0.577565556661551191871434570510
    c82  = 0.587705966921049793460214735384
    c83  = 0.589381451268627484691785141333
    c84  = 0.592986491220229781173184479020
    c85  = 0.595802032257512558352851977786
    c86  = 0.608387732480295701467642844900
    c87  = 0.614676179457459459886207123689
    c88  = 0.621848449170290059217419160523
    c89  = 0.622157567762384460486308633739
    c90  = 0.622676612811207862610266429719
    c91  = 0.630785872470733279750621841647
    c92  = 0.633233727456109697629084715063
    c93  = 0.636653261166854649088561315120
    c94  = 0.643025152770664577175493066014
    c95  = 0.667172356294583468116515015508
    c96  = 0.672635955044530707298818743890
    c97  = 0.677382951350006741651359740512
    c98  = 0.679881228021127857265652323717
    c99  = 0.688396221733184622875854298909
    c100 = 0.690450507936430430757963629226
    c101 = 0.714580965645342971752172911007
    c102 = 0.715616471919764427484348934472
    c103 = 0.722950553320904141338476352642
    c104 = 0.726222147179196970018985424233
    c105 = 0.732047831065817381046210554452
    c106 = 0.736442310527040657172217914588
    c107 = 0.737124353993660459740674141210
    c108 = 0.740997682546609589702423834598
    c109 = 0.749892597468877142742018151118
    c110 = 0.760314443546650833316541805287
    c111 = 0.783642103860671683069636758428
    c112 = 0.785566027283824523760430728233
    c113 = 0.802726178465644138542820388466
    c114 = 0.809185236722345980859633064453
    c115 = 0.811098999168684053330893055530
    c116 = 0.821632185102858726610192292628
    c117 = 0.825728715492664468251810364133
    c118 = 0.840189936730335582160004491514
    c119 = 0.856038213590682988815842585430
    c120 = 0.857993010588478383480650586893
    c121 = 0.8581693769216561246670265980052
    c122 = 0.868831978436489752507611136468
    c123 = 0.882980257738655990219384383906
    c124 = 0.885519187245794751685347657470
    c125 = 0.895352431007410507406774075359
    c126 = 0.897841697813038231545287487472
    c127 = 0.908586608963453803816249305052
    c128 = 0.910159613633167907261208817628
    c129 = 0.913529658102100921473495583931
    c130 = 0.929763312563828321774323210543
    c131 = 0.932116266125068213586085556334
    c132 = 0.934520701409643076690802088752
    c133 = 0.94471820066308823010552349216496
    c134 = 0.951963736143801411044374157271
    c135 = 0.952603714216957646543768539756
    c136 = 0.9580657328877488408038201516496
    c137 = 0.958948806095788645206488190884
    c138 = 0.965926642742104178964163395206
    c139 = 0.981618567219712788779329756039
    c140 = 0.982699283642844364273486537501
    c141 = 0.992114071845782004902731250760
    c142 = 0.992519824815493695419087188404
    c143 = 1.00257349945453890210517829968

    points = []

    points.append([  0.0,   0.0,  c143])
    points.append([  0.0,   0.0, -c143])
    points.append([ c143,   0.0,   0.0])
    points.append([-c143,   0.0,   0.0])
    points.append([  0.0,  c143,   0.0])
    points.append([  0.0, -c143,   0.0])
    points.append([   c2,  -c16,  c142])
    points.append([   c2,   c16, -c142])
    points.append([  -c2,   c16,  c142])
    points.append([  -c2,  -c16, -c142])
    points.append([ c142,   -c2,   c16])
    points.append([ c142,    c2,  -c16])
    points.append([-c142,    c2,   c16])
    points.append([-c142,   -c2,  -c16])
    points.append([  c16, -c142,    c2])
    points.append([  c16,  c142,   -c2])
    points.append([ -c16,  c142,    c2])
    points.append([ -c16, -c142,   -c2])
    points.append([  c18,    c3,  c141])
    points.append([  c18,   -c3, -c141])
    points.append([ -c18,   -c3,  c141])
    points.append([ -c18,    c3, -c141])
    points.append([ c141,   c18,    c3])
    points.append([ c141,  -c18,   -c3])
    points.append([-c141,  -c18,    c3])
    points.append([-c141,   c18,   -c3])
    points.append([   c3,  c141,   c18])
    points.append([   c3, -c141,  -c18])
    points.append([  -c3, -c141,   c18])
    points.append([  -c3,  c141,  -c18])
    points.append([  c11,   c21,  c140])
    points.append([  c11,  -c21, -c140])
    points.append([ -c11,  -c21,  c140])
    points.append([ -c11,   c21, -c140])
    points.append([ c140,   c11,   c21])
    points.append([ c140,  -c11,  -c21])
    points.append([-c140,  -c11,   c21])
    points.append([-c140,   c11,  -c21])
    points.append([  c21,  c140,   c11])
    points.append([  c21, -c140,  -c11])
    points.append([ -c21, -c140,   c11])
    points.append([ -c21,  c140,  -c11])
    points.append([  c22,  -c12,  c139])
    points.append([  c22,   c12, -c139])
    points.append([ -c22,   c12,  c139])
    points.append([ -c22,  -c12, -c139])
    points.append([ c139,  -c22,   c12])
    points.append([ c139,   c22,  -c12])
    points.append([-c139,   c22,   c12])
    points.append([-c139,  -c22,  -c12])
    points.append([  c12, -c139,   c22])
    points.append([  c12,  c139,  -c22])
    points.append([ -c12,  c139,   c22])
    points.append([ -c12, -c139,  -c22])
    points.append([   c8,  -c34,  c138])
    points.append([   c8,   c34, -c138])
    points.append([  -c8,   c34,  c138])
    points.append([  -c8,  -c34, -c138])
    points.append([ c138,   -c8,   c34])
    points.append([ c138,    c8,  -c34])
    points.append([-c138,    c8,   c34])
    points.append([-c138,   -c8,  -c34])
    points.append([  c34, -c138,    c8])
    points.append([  c34,  c138,   -c8])
    points.append([ -c34,  c138,    c8])
    points.append([ -c34, -c138,   -c8])
    points.append([   c1,   c38,  c137])
    points.append([   c1,  -c38, -c137])
    points.append([  -c1,  -c38,  c137])
    points.append([  -c1,   c38, -c137])
    points.append([ c137,    c1,   c38])
    points.append([ c137,   -c1,  -c38])
    points.append([-c137,   -c1,   c38])
    points.append([-c137,    c1,  -c38])
    points.append([  c38,  c137,    c1])
    points.append([  c38, -c137,   -c1])
    points.append([ -c38, -c137,    c1])
    points.append([ -c38,  c137,   -c1])
    points.append([  c36,   c13,  c136])
    points.append([  c36,  -c13, -c136])
    points.append([ -c36,  -c13,  c136])
    points.append([ -c36,   c13, -c136])
    points.append([ c136,   c36,   c13])
    points.append([ c136,  -c36,  -c13])
    points.append([-c136,  -c36,   c13])
    points.append([-c136,   c36,  -c13])
    points.append([  c13,  c136,   c36])
    points.append([  c13, -c136,  -c36])
    points.append([ -c13, -c136,   c36])
    points.append([ -c13,  c136,  -c36])
    points.append([  c26,  -c31,  c135])
    points.append([  c26,   c31, -c135])
    points.append([ -c26,   c31,  c135])
    points.append([ -c26,  -c31, -c135])
    points.append([ c135,  -c26,   c31])
    points.append([ c135,   c26,  -c31])
    points.append([-c135,   c26,   c31])
    points.append([-c135,  -c26,  -c31])
    points.append([  c31, -c135,   c26])
    points.append([  c31,  c135,  -c26])
    points.append([ -c31,  c135,   c26])
    points.append([ -c31, -c135,  -c26])
    points.append([  c27,   c32,  c134])
    points.append([  c27,  -c32, -c134])
    points.append([ -c27,  -c32,  c134])
    points.append([ -c27,   c32, -c134])
    points.append([ c134,   c27,   c32])
    points.append([ c134,  -c27,  -c32])
    points.append([-c134,  -c27,   c32])
    points.append([-c134,   c27,  -c32])
    points.append([  c32,  c134,   c27])
    points.append([  c32, -c134,  -c27])
    points.append([ -c32, -c134,   c27])
    points.append([ -c32,  c134,  -c27])
    points.append([  c43,   -c6,  c133])
    points.append([  c43,    c6, -c133])
    points.append([ -c43,    c6,  c133])
    points.append([ -c43,   -c6, -c133])
    points.append([ c133,  -c43,    c6])
    points.append([ c133,   c43,   -c6])
    points.append([-c133,   c43,    c6])
    points.append([-c133,  -c43,   -c6])
    points.append([   c6, -c133,   c43])
    points.append([   c6,  c133,  -c43])
    points.append([  -c6,  c133,   c43])
    points.append([  -c6, -c133,  -c43])
    points.append([  0.0,   c47,  c132])
    points.append([  0.0,   c47, -c132])
    points.append([  0.0,  -c47,  c132])
    points.append([  0.0,  -c47, -c132])
    points.append([ c132,   0.0,   c47])
    points.append([ c132,   0.0,  -c47])
    points.append([-c132,   0.0,   c47])
    points.append([-c132,   0.0,  -c47])
    points.append([  c47,  c132,   0.0])
    points.append([  c47, -c132,   0.0])
    points.append([ -c47,  c132,   0.0])
    points.append([ -c47, -c132,   0.0])
    points.append([  c15,   c45,  c131])
    points.append([  c15,  -c45, -c131])
    points.append([ -c15,  -c45,  c131])
    points.append([ -c15,   c45, -c131])
    points.append([ c131,   c15,   c45])
    points.append([ c131,  -c15,  -c45])
    points.append([-c131,  -c15,   c45])
    points.append([-c131,   c15,  -c45])
    points.append([  c45,  c131,   c15])
    points.append([  c45, -c131,  -c15])
    points.append([ -c45, -c131,   c15])
    points.append([ -c45,  c131,  -c15])
    points.append([  c10,  -c48,  c130])
    points.append([  c10,   c48, -c130])
    points.append([ -c10,   c48,  c130])
    points.append([ -c10,  -c48, -c130])
    points.append([ c130,  -c10,   c48])
    points.append([ c130,   c10,  -c48])
    points.append([-c130,   c10,   c48])
    points.append([-c130,  -c10,  -c48])
    points.append([  c48, -c130,   c10])
    points.append([  c48,  c130,  -c10])
    points.append([ -c48,  c130,   c10])
    points.append([ -c48, -c130,  -c10])
    points.append([  c46,  -c30,  c129])
    points.append([  c46,   c30, -c129])
    points.append([ -c46,   c30,  c129])
    points.append([ -c46,  -c30, -c129])
    points.append([ c129,  -c46,   c30])
    points.append([ c129,   c46,  -c30])
    points.append([-c129,   c46,   c30])
    points.append([-c129,  -c46,  -c30])
    points.append([  c30, -c129,   c46])
    points.append([  c30,  c129,  -c46])
    points.append([ -c30,  c129,   c46])
    points.append([ -c30, -c129,  -c46])
    points.append([  c25,  -c49,  c128])
    points.append([  c25,   c49, -c128])
    points.append([ -c25,   c49,  c128])
    points.append([ -c25,  -c49, -c128])
    points.append([ c128,  -c25,   c49])
    points.append([ c128,   c25,  -c49])
    points.append([-c128,   c25,   c49])
    points.append([-c128,  -c25,  -c49])
    points.append([  c49, -c128,   c25])
    points.append([  c49,  c128,  -c25])
    points.append([ -c49,  c128,   c25])
    points.append([ -c49, -c128,  -c25])
    points.append([   c4,   c59,  c127])
    points.append([   c4,  -c59, -c127])
    points.append([  -c4,  -c59,  c127])
    points.append([  -c4,   c59, -c127])
    points.append([ c127,    c4,   c59])
    points.append([ c127,   -c4,  -c59])
    points.append([-c127,   -c4,   c59])
    points.append([-c127,    c4,  -c59])
    points.append([  c59,  c127,    c4])
    points.append([  c59, -c127,   -c4])
    points.append([ -c59, -c127,    c4])
    points.append([ -c59,  c127,   -c4])
    points.append([  c42,   c41,  c126])
    points.append([  c42,  -c41, -c126])
    points.append([ -c42,  -c41,  c126])
    points.append([ -c42,   c41, -c126])
    points.append([ c126,   c42,   c41])
    points.append([ c126,  -c42,  -c41])
    points.append([-c126,  -c42,   c41])
    points.append([-c126,   c42,  -c41])
    points.append([  c41,  c126,   c42])
    points.append([  c41, -c126,  -c42])
    points.append([ -c41, -c126,   c42])
    points.append([ -c41,  c126,  -c42])
    points.append([  c58,   c23,  c125])
    points.append([  c58,  -c23, -c125])
    points.append([ -c58,  -c23,  c125])
    points.append([ -c58,   c23, -c125])
    points.append([ c125,   c58,   c23])
    points.append([ c125,  -c58,  -c23])
    points.append([-c125,  -c58,   c23])
    points.append([-c125,   c58,  -c23])
    points.append([  c23,  c125,   c58])
    points.append([  c23, -c125,  -c58])
    points.append([ -c23, -c125,   c58])
    points.append([ -c23,  c125,  -c58])
    points.append([   c5,  -c62,  c124])
    points.append([   c5,   c62, -c124])
    points.append([  -c5,   c62,  c124])
    points.append([  -c5,  -c62, -c124])
    points.append([ c124,   -c5,   c62])
    points.append([ c124,    c5,  -c62])
    points.append([-c124,    c5,   c62])
    points.append([-c124,   -c5,  -c62])
    points.append([  c62, -c124,    c5])
    points.append([  c62,  c124,   -c5])
    points.append([ -c62,  c124,    c5])
    points.append([ -c62, -c124,   -c5])
    points.append([  c29,   c60,  c123])
    points.append([  c29,  -c60, -c123])
    points.append([ -c29,  -c60,  c123])
    points.append([ -c29,   c60, -c123])
    points.append([ c123,   c29,   c60])
    points.append([ c123,  -c29,  -c60])
    points.append([-c123,  -c29,   c60])
    points.append([-c123,   c29,  -c60])
    points.append([  c60,  c123,   c29])
    points.append([  c60, -c123,  -c29])
    points.append([ -c60, -c123,   c29])
    points.append([ -c60,  c123,  -c29])
    points.append([  c44,  -c50,  c122])
    points.append([  c44,   c50, -c122])
    points.append([ -c44,   c50,  c122])
    points.append([ -c44,  -c50, -c122])
    points.append([ c122,  -c44,   c50])
    points.append([ c122,   c44,  -c50])
    points.append([-c122,   c44,   c50])
    points.append([-c122,  -c44,  -c50])
    points.append([  c50, -c122,   c44])
    points.append([  c50,  c122,  -c44])
    points.append([ -c50,  c122,   c44])
    points.append([ -c50, -c122,  -c44])
    points.append([  c75,   0.0,  c121])
    points.append([  c75,   0.0, -c121])
    points.append([ -c75,   0.0,  c121])
    points.append([ -c75,   0.0, -c121])
    points.append([ c121,   c75,   0.0])
    points.append([ c121,  -c75,   0.0])
    points.append([-c121,   c75,   0.0])
    points.append([-c121,  -c75,   0.0])
    points.append([  0.0,  c121,   c75])
    points.append([  0.0,  c121,  -c75])
    points.append([  0.0, -c121,   c75])
    points.append([  0.0, -c121,  -c75])
    points.append([  c14,   c72,  c120])
    points.append([  c14,  -c72, -c120])
    points.append([ -c14,  -c72,  c120])
    points.append([ -c14,   c72, -c120])
    points.append([ c120,   c14,   c72])
    points.append([ c120,  -c14,  -c72])
    points.append([-c120,  -c14,   c72])
    points.append([-c120,   c14,  -c72])
    points.append([  c72,  c120,   c14])
    points.append([  c72, -c120,  -c14])
    points.append([ -c72, -c120,   c14])
    points.append([ -c72,  c120,  -c14])
    points.append([  c20,  -c67,  c119])
    points.append([  c20,   c67, -c119])
    points.append([ -c20,   c67,  c119])
    points.append([ -c20,  -c67, -c119])
    points.append([ c119,  -c20,   c67])
    points.append([ c119,   c20,  -c67])
    points.append([-c119,   c20,   c67])
    points.append([-c119,  -c20,  -c67])
    points.append([  c67, -c119,   c20])
    points.append([  c67,  c119,  -c20])
    points.append([ -c67,  c119,   c20])
    points.append([ -c67, -c119,  -c20])
    points.append([  c71,  -c28,  c118])
    points.append([  c71,   c28, -c118])
    points.append([ -c71,   c28,  c118])
    points.append([ -c71,  -c28, -c118])
    points.append([ c118,  -c71,   c28])
    points.append([ c118,   c71,  -c28])
    points.append([-c118,   c71,   c28])
    points.append([-c118,  -c71,  -c28])
    points.append([  c28, -c118,   c71])
    points.append([  c28,  c118,  -c71])
    points.append([ -c28,  c118,   c71])
    points.append([ -c28, -c118,  -c71])
    points.append([   c0,  -c79,  c117])
    points.append([   c0,   c79, -c117])
    points.append([  -c0,   c79,  c117])
    points.append([  -c0,  -c79, -c117])
    points.append([ c117,   -c0,   c79])
    points.append([ c117,    c0,  -c79])
    points.append([-c117,    c0,   c79])
    points.append([-c117,   -c0,  -c79])
    points.append([  c79, -c117,    c0])
    points.append([  c79,  c117,   -c0])
    points.append([ -c79,  c117,    c0])
    points.append([ -c79, -c117,   -c0])
    points.append([  c57,   c55,  c116])
    points.append([  c57,  -c55, -c116])
    points.append([ -c57,  -c55,  c116])
    points.append([ -c57,   c55, -c116])
    points.append([ c116,   c57,   c55])
    points.append([ c116,  -c57,  -c55])
    points.append([-c116,  -c57,   c55])
    points.append([-c116,   c57,  -c55])
    points.append([  c55,  c116,   c57])
    points.append([  c55, -c116,  -c57])
    points.append([ -c55, -c116,   c57])
    points.append([ -c55,  c116,  -c57])
    points.append([  c40,   c69,  c115])
    points.append([  c40,   c69, -c115])
    points.append([  c40,  -c69,  c115])
    points.append([  c40,  -c69, -c115])
    points.append([ -c40,   c69,  c115])
    points.append([ -c40,   c69, -c115])
    points.append([ -c40,  -c69,  c115])
    points.append([ -c40,  -c69, -c115])
    points.append([ c115,   c40,   c69])
    points.append([ c115,   c40,  -c69])
    points.append([ c115,  -c40,   c69])
    points.append([ c115,  -c40,  -c69])
    points.append([-c115,   c40,   c69])
    points.append([-c115,   c40,  -c69])
    points.append([-c115,  -c40,   c69])
    points.append([-c115,  -c40,  -c69])
    points.append([  c69,  c115,   c40])
    points.append([  c69,  c115,  -c40])
    points.append([  c69, -c115,   c40])
    points.append([  c69, -c115,  -c40])
    points.append([ -c69,  c115,   c40])
    points.append([ -c69,  c115,  -c40])
    points.append([ -c69, -c115,   c40])
    points.append([ -c69, -c115,  -c40])
    points.append([  c74,   c37,  c114])
    points.append([  c74,  -c37, -c114])
    points.append([ -c74,  -c37,  c114])
    points.append([ -c74,   c37, -c114])
    points.append([ c114,   c74,   c37])
    points.append([ c114,  -c74,  -c37])
    points.append([-c114,  -c74,   c37])
    points.append([-c114,   c74,  -c37])
    points.append([  c37,  c114,   c74])
    points.append([  c37, -c114,  -c74])
    points.append([ -c37, -c114,   c74])
    points.append([ -c37,  c114,  -c74])
    points.append([  c64,  -c51,  c113])
    points.append([  c64,   c51, -c113])
    points.append([ -c64,   c51,  c113])
    points.append([ -c64,  -c51, -c113])
    points.append([ c113,  -c64,   c51])
    points.append([ c113,   c64,  -c51])
    points.append([-c113,   c64,   c51])
    points.append([-c113,  -c64,  -c51])
    points.append([  c51, -c113,   c64])
    points.append([  c51,  c113,  -c64])
    points.append([ -c51,  c113,   c64])
    points.append([ -c51, -c113,  -c64])
    points.append([  c17,  -c86,  c112])
    points.append([  c17,   c86, -c112])
    points.append([ -c17,   c86,  c112])
    points.append([ -c17,  -c86, -c112])
    points.append([ c112,  -c17,   c86])
    points.append([ c112,   c17,  -c86])
    points.append([-c112,   c17,   c86])
    points.append([-c112,  -c17,  -c86])
    points.append([  c86, -c112,   c17])
    points.append([  c86,  c112,  -c17])
    points.append([ -c86,  c112,   c17])
    points.append([ -c86, -c112,  -c17])
    points.append([  c24,   c84,  c111])
    points.append([  c24,  -c84, -c111])
    points.append([ -c24,  -c84,  c111])
    points.append([ -c24,   c84, -c111])
    points.append([ c111,   c24,   c84])
    points.append([ c111,  -c24,  -c84])
    points.append([-c111,  -c24,   c84])
    points.append([-c111,   c24,  -c84])
    points.append([  c84,  c111,   c24])
    points.append([  c84, -c111,  -c24])
    points.append([ -c84, -c111,   c24])
    points.append([ -c84,  c111,  -c24])
    points.append([  c92,   c19,  c110])
    points.append([  c92,  -c19, -c110])
    points.append([ -c92,  -c19,  c110])
    points.append([ -c92,   c19, -c110])
    points.append([ c110,   c92,   c19])
    points.append([ c110,  -c92,  -c19])
    points.append([-c110,  -c92,   c19])
    points.append([-c110,   c92,  -c19])
    points.append([  c19,  c110,   c92])
    points.append([  c19, -c110,  -c92])
    points.append([ -c19, -c110,   c92])
    points.append([ -c19,  c110,  -c92])
    points.append([  c61,  -c70,  c109])
    points.append([  c61,   c70, -c109])
    points.append([ -c61,   c70,  c109])
    points.append([ -c61,  -c70, -c109])
    points.append([ c109,  -c61,   c70])
    points.append([ c109,   c61,  -c70])
    points.append([-c109,   c61,   c70])
    points.append([-c109,  -c61,  -c70])
    points.append([  c70, -c109,   c61])
    points.append([  c70,  c109,  -c61])
    points.append([ -c70,  c109,   c61])
    points.append([ -c70, -c109,  -c61])
    points.append([   c7,   c96,  c108])
    points.append([   c7,  -c96, -c108])
    points.append([  -c7,  -c96,  c108])
    points.append([  -c7,   c96, -c108])
    points.append([ c108,    c7,   c96])
    points.append([ c108,   -c7,  -c96])
    points.append([-c108,   -c7,   c96])
    points.append([-c108,    c7,  -c96])
    points.append([  c96,  c108,    c7])
    points.append([  c96, -c108,   -c7])
    points.append([ -c96, -c108,    c7])
    points.append([ -c96,  c108,   -c7])
    points.append([  c93,  -c33,  c107])
    points.append([  c93,   c33, -c107])
    points.append([ -c93,   c33,  c107])
    points.append([ -c93,  -c33, -c107])
    points.append([ c107,  -c93,   c33])
    points.append([ c107,   c93,  -c33])
    points.append([-c107,   c93,   c33])
    points.append([-c107,  -c93,  -c33])
    points.append([  c33, -c107,   c93])
    points.append([  c33,  c107,  -c93])
    points.append([ -c33,  c107,   c93])
    points.append([ -c33, -c107,  -c93])
    points.append([  c35,  -c89,  c106])
    points.append([  c35,   c89, -c106])
    points.append([ -c35,   c89,  c106])
    points.append([ -c35,  -c89, -c106])
    points.append([ c106,  -c35,   c89])
    points.append([ c106,   c35,  -c89])
    points.append([-c106,   c35,   c89])
    points.append([-c106,  -c35,  -c89])
    points.append([  c89, -c106,   c35])
    points.append([  c89,  c106,  -c35])
    points.append([ -c89,  c106,   c35])
    points.append([ -c89, -c106,  -c35])
    points.append([  c66,   c65,  c105])
    points.append([  c66,  -c65, -c105])
    points.append([ -c66,  -c65,  c105])
    points.append([ -c66,   c65, -c105])
    points.append([ c105,   c66,   c65])
    points.append([ c105,  -c66,  -c65])
    points.append([-c105,  -c66,   c65])
    points.append([-c105,   c66,  -c65])
    points.append([  c65,  c105,   c66])
    points.append([  c65, -c105,  -c66])
    points.append([ -c65, -c105,   c66])
    points.append([ -c65,  c105,  -c66])
    points.append([  c99,   -c9,  c104])
    points.append([  c99,    c9, -c104])
    points.append([ -c99,    c9,  c104])
    points.append([ -c99,   -c9, -c104])
    points.append([ c104,  -c99,    c9])
    points.append([ c104,   c99,   -c9])
    points.append([-c104,   c99,    c9])
    points.append([-c104,  -c99,   -c9])
    points.append([   c9, -c104,   c99])
    points.append([   c9,  c104,  -c99])
    points.append([  -c9,  c104,   c99])
    points.append([  -c9, -c104,  -c99])
    points.append([  c54,   c80,  c103])
    points.append([  c54,  -c80, -c103])
    points.append([ -c54,  -c80,  c103])
    points.append([ -c54,   c80, -c103])
    points.append([ c103,   c54,   c80])
    points.append([ c103,  -c54,  -c80])
    points.append([-c103,  -c54,   c80])
    points.append([-c103,   c54,  -c80])
    points.append([  c80,  c103,   c54])
    points.append([  c80, -c103,  -c54])
    points.append([ -c80, -c103,   c54])
    points.append([ -c80,  c103,  -c54])
    points.append([  c82,  -c53,  c102])
    points.append([  c82,   c53, -c102])
    points.append([ -c82,   c53,  c102])
    points.append([ -c82,  -c53, -c102])
    points.append([ c102,  -c82,   c53])
    points.append([ c102,   c82,  -c53])
    points.append([-c102,   c82,   c53])
    points.append([-c102,  -c82,  -c53])
    points.append([  c53, -c102,   c82])
    points.append([  c53,  c102,  -c82])
    points.append([ -c53,  c102,   c82])
    points.append([ -c53, -c102,  -c82])
    points.append([  c83,   c52,  c101])
    points.append([  c83,  -c52, -c101])
    points.append([ -c83,  -c52,  c101])
    points.append([ -c83,   c52, -c101])
    points.append([ c101,   c83,   c52])
    points.append([ c101,  -c83,  -c52])
    points.append([-c101,  -c83,   c52])
    points.append([-c101,   c83,  -c52])
    points.append([  c52,  c101,   c83])
    points.append([  c52, -c101,  -c83])
    points.append([ -c52, -c101,   c83])
    points.append([ -c52,  c101,  -c83])
    points.append([  c39,   c95,  c100])
    points.append([  c39,  -c95, -c100])
    points.append([ -c39,  -c95,  c100])
    points.append([ -c39,   c95, -c100])
    points.append([ c100,   c39,   c95])
    points.append([ c100,  -c39,  -c95])
    points.append([-c100,  -c39,   c95])
    points.append([-c100,   c39,  -c95])
    points.append([  c95,  c100,   c39])
    points.append([  c95, -c100,  -c39])
    points.append([ -c95, -c100,   c39])
    points.append([ -c95,  c100,  -c39])
    points.append([  c56,  -c87,   c98])
    points.append([  c56,   c87,  -c98])
    points.append([ -c56,   c87,   c98])
    points.append([ -c56,  -c87,  -c98])
    points.append([  c98,  -c56,   c87])
    points.append([  c98,   c56,  -c87])
    points.append([ -c98,   c56,   c87])
    points.append([ -c98,  -c56,  -c87])
    points.append([  c87,  -c98,   c56])
    points.append([  c87,   c98,  -c56])
    points.append([ -c87,   c98,   c56])
    points.append([ -c87,  -c98,  -c56])
    points.append([  c77,  -c68,   c97])
    points.append([  c77,   c68,  -c97])
    points.append([ -c77,   c68,   c97])
    points.append([ -c77,  -c68,  -c97])
    points.append([  c97,  -c77,   c68])
    points.append([  c97,   c77,  -c68])
    points.append([ -c97,   c77,   c68])
    points.append([ -c97,  -c77,  -c68])
    points.append([  c68,  -c97,   c77])
    points.append([  c68,   c97,  -c77])
    points.append([ -c68,   c97,   c77])
    points.append([ -c68,  -c97,  -c77])
    points.append([  c78,   c76,   c94])
    points.append([  c78,  -c76,  -c94])
    points.append([ -c78,  -c76,   c94])
    points.append([ -c78,   c76,  -c94])
    points.append([  c94,   c78,   c76])
    points.append([  c94,  -c78,  -c76])
    points.append([ -c94,  -c78,   c76])
    points.append([ -c94,   c78,  -c76])
    points.append([  c76,   c94,   c78])
    points.append([  c76,  -c94,  -c78])
    points.append([ -c76,  -c94,   c78])
    points.append([ -c76,   c94,  -c78])
    points.append([  c63,   c90,   c91])
    points.append([  c63,  -c90,  -c91])
    points.append([ -c63,  -c90,   c91])
    points.append([ -c63,   c90,  -c91])
    points.append([  c91,   c63,   c90])
    points.append([  c91,  -c63,  -c90])
    points.append([ -c91,  -c63,   c90])
    points.append([ -c91,   c63,  -c90])
    points.append([  c90,   c91,   c63])
    points.append([  c90,  -c91,  -c63])
    points.append([ -c90,  -c91,   c63])
    points.append([ -c90,   c91,  -c63])
    points.append([  c73,  -c85,   c88])
    points.append([  c73,   c85,  -c88])
    points.append([ -c73,   c85,   c88])
    points.append([ -c73,  -c85,  -c88])
    points.append([  c88,  -c73,   c85])
    points.append([  c88,   c73,  -c85])
    points.append([ -c88,   c73,   c85])
    points.append([ -c88,  -c73,  -c85])
    points.append([  c85,  -c88,   c73])
    points.append([  c85,   c88,  -c73])
    points.append([ -c85,   c88,   c73])
    points.append([ -c85,  -c88,  -c73])
    points.append([  c81,   c81,   c81])
    points.append([  c81,   c81,  -c81])
    points.append([  c81,  -c81,   c81])
    points.append([  c81,  -c81,  -c81])
    points.append([ -c81,   c81,   c81])
    points.append([ -c81,   c81,  -c81])
    points.append([ -c81,  -c81,   c81])
    points.append([ -c81,  -c81,  -c81])

    return points

#def gen_points0():
#  return gen_e8_points()

